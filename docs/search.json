[{"path":"index.html","id":"hajimeni","chapter":"はじめに","heading":"はじめに","text":"本webサイトは，技術書典12にて頒布したがんばらないデータ加工　Rによるくり返し作業入門　前編のオンラインバージョンこちらは随時updateされていく予定","code":""},{"path":"index.html","id":"概要","chapter":"はじめに","heading":"概要","text":"本書の目的\nデータ加工での面倒な作業をRとRStudioで手軽に実行できるようになるための基礎知識を紹介\nデータ加工での面倒な作業をRとRStudioで手軽に実行できるようになるための基礎知識を紹介本書の内容\nRのモダンな方法を使い，データ加工の過程（例：前処理、データクリーニング、データクレンジング、データラングリングなど）で用いる基本関数の紹介\n実際は核心の部分に入る前の準備段階までにとどまる。タイトルに「前編」とあるのはその理由による\n基本的にデータフレーム（1.6参照）の形になったきれいな構造を想定しているが，ここで解説した技術に熟達することで，その他のデータ形式や汚いデータ構造にも立ち向かえるようになる\nRのモダンな方法を使い，データ加工の過程（例：前処理、データクリーニング、データクレンジング、データラングリングなど）で用いる基本関数の紹介実際は核心の部分に入る前の準備段階までにとどまる。タイトルに「前編」とあるのはその理由による基本的にデータフレーム（1.6参照）の形になったきれいな構造を想定しているが，ここで解説した技術に熟達することで，その他のデータ形式や汚いデータ構造にも立ち向かえるようになる執筆動機\n本書を書こうと思ったのは拙既刊書『Rで読むExcelファイル』と同じく，「RとRStudioを使いたい！と思う人がもっと増えればいいのに」という願いから\n本書を書こうと思ったのは拙既刊書『Rで読むExcelファイル』と同じく，「RとRStudioを使いたい！と思う人がもっと増えればいいのに」という願いから今後の展望\nよりタイトルの内容に沿った次回作の「後編」（もしかしたら「中編」も）をお楽しみに！\nよりタイトルの内容に沿った次回作の「後編」（もしかしたら「中編」も）をお楽しみに！本書の内容は、githubレポジトリですべて公開","code":""},{"path":"index.html","id":"本書の特徴","chapter":"はじめに","heading":"本書の特徴","text":"タイトルの「がんばらない」とは，単純作業のくり返しに無駄なエネルギーを注がなくてよいように，なるべく人力に頼らないようにすること扱う内容は自分が学び始めの時に教えてもらいたかったことが中心これまでの解説で不足していると考えられるポイント\n便利な関数や基本的な使い方の解説は多いが，データ加工の実務上知りたいコード例が豊富なわけではない\n同じ作業を大量の変数についてくり返し実行したい時のやり方の解説は少ない\n便利な関数や基本的な使い方の解説は多いが，データ加工の実務上知りたいコード例が豊富なわけではない同じ作業を大量の変数についてくり返し実行したい時のやり方の解説は少ない本書の強み\nくり返し同じ作業する部分を効率化したコードを併せて解説する点\n自分の学習経験から，そのコード例が知りたかったんだ！という実用的な方法を整理\nくり返し同じ作業する部分を効率化したコードを併せて解説する点自分の学習経験から，そのコード例が知りたかったんだ！という実用的な方法を整理まずモダンなRのデータ加工法での基本の書き方を解説した後に，【効率化】でより効率的にコードを書く解説を行う【効率化】のタグが本書では特に重要になる。手作業のくり返しをなるべく避けることが目指すべき点冗長だが【別解】を示すことで様々な関数の働きを理解でき，手持ちの武器が増えデータ加工の幅が広がる","code":""},{"path":"index.html","id":"想定読者","chapter":"はじめに","heading":"想定読者","text":"RとRStudioをダウンロードしてPCにインストールまでできることが最低条件\nweb上に様々な解説があり，あとは基本的にOKしていけばできるはず\n例えば公的には総務省の資料などがある1\nWindows10だとインストール時にうまくいかないことがあり，自分もくじけそうになったことがあったが，それは乗り越えてしまうと戻りたくないので今回は解説あきらめた\nどうしてもインストールできなかったら，ブラウザから実行可能なPosit Cloud（旧：RStudio Cloud）を使って練習できる（ただし無料版は時間制限があるらしい）\nweb上に様々な解説があり，あとは基本的にOKしていけばできるはず例えば公的には総務省の資料などがある1Windows10だとインストール時にうまくいかないことがあり，自分もくじけそうになったことがあったが，それは乗り越えてしまうと戻りたくないので今回は解説あきらめたどうしてもインストールできなかったら，ブラウザから実行可能なPosit Cloud（旧：RStudio Cloud）を使って練習できる（ただし無料版は時間制限があるらしい）初学者から始めてちょっと背伸びできるくらいまでが到達目標","code":""},{"path":"index.html","id":"各章の紹介","chapter":"はじめに","heading":"各章の紹介","text":"まず1章では、RとRStudioに初めて触れる方，初学者を対象とした前提知識を解説する。ゆくゆく楽をするためには避けて通れない知識なので，用語になじんでおきたいまず1章では、RとRStudioに初めて触れる方，初学者を対象とした前提知識を解説する。ゆくゆく楽をするためには避けて通れない知識なので，用語になじんでおきたい2章はデータの列（変数）2を選ぶ方法を解説する。データをコンパクトにしたり，後のデータ解析等で必要な変数を取得したりするなど，データ加工プロセス全体で必要な基本知識もあるので最初に学んでおきたい2章はデータの列（変数）2を選ぶ方法を解説する。データをコンパクトにしたり，後のデータ解析等で必要な変数を取得したりするなど，データ加工プロセス全体で必要な基本知識もあるので最初に学んでおきたい3章はデータの列名（変数名）を変える方法について解説する。単純に見えるがデータ加工の際になくてはならない技術である。効率化させるためには初心者から少し脱する必要があり，奥が深い3章はデータの列名（変数名）を変える方法について解説する。単純に見えるがデータ加工の際になくてはならない技術である。効率化させるためには初心者から少し脱する必要があり，奥が深い4章はデータの行（ケースまたはオブザベーション）を選ぶ方法を解説する。データや加工した結果，分析した結果をコンパクトにするのに役立つ4章はデータの行（ケースまたはオブザベーション）を選ぶ方法を解説する。データや加工した結果，分析した結果をコンパクトにするのに役立つ5章はデータに新しい列を追加する方法について解説する。例えば合計点の作成や，年齢層カテゴリや2区分変数（いわゆるダミー変数）の作成など，変数を計算して新しい変数を作る作業はよく発生する。効率化のために避けて通れないacross()についてもここで解説する5章はデータに新しい列を追加する方法について解説する。例えば合計点の作成や，年齢層カテゴリや2区分変数（いわゆるダミー変数）の作成など，変数を計算して新しい変数を作る作業はよく発生する。効率化のために避けて通れないacross()についてもここで解説する6章は要約値の計算について解説する。実務では大量の変数を一気に処理する必要がある場面が多いので，効率化を意識した説明を多く入れている6章は要約値の計算について解説する。実務では大量の変数を一気に処理する必要がある場面が多いので，効率化を意識した説明を多く入れている","code":""},{"path":"index.html","id":"執筆環境","chapter":"はじめに","heading":"執筆環境","text":"本書はbookdownにて執筆表紙のタイトルは「あずきフォントB」v1.20を使用","code":""},{"path":"index.html","id":"rおよびrstudioパッケージのバージョン","chapter":"はじめに","heading":"RおよびRStudio、パッケージのバージョン","text":"RのバージョンRStudioのバージョン\n‘2022.2.1.461’（手動で記入）\n‘2022.2.1.461’（手動で記入）","code":"## # A tibble: 4 × 2\n##   ind     values                           \n##   <chr>   <chr>                            \n## 1 version R version 4.2.0 (2022-04-22 ucrt)\n## 2 os      Windows 10 x64 (build 19045)     \n## 3 system  x86_64, mingw32                  \n## 4 date    2023-01-03## # A tibble: 2 × 2\n##   package   loadedversion\n##   <chr>     <chr>        \n## 1 bookdown  0.31         \n## 2 tidyverse 1.3.2"},{"path":"index.html","id":"注意事項など","chapter":"はじめに","heading":"注意事項など","text":"本書の内容はすべてwindows環境を想定この本に書いてある内容は、筆者が学習したことをまとめているものにすぎないため、正常な動作の保証はできない。使用する際は、自己責任で","code":""},{"path":"index.html","id":"ライセンス","chapter":"はじめに","heading":"ライセンス","text":"本webサイトは CC -SA 4.0\n引用例：やわらかクジラ（2021）『がんばらないデータ加工　Rによるくり返し作業入門　前編』. （サークル名：ヤサイゼリー）, オンライン版:https://izunyan.github.io/gisho12/\nただし，ライセンスの適用は本書での著作部分のみとなり，用いているデータやパッケージや画像などはそれぞれのライセンスに準じる\n引用例：やわらかクジラ（2021）『がんばらないデータ加工　Rによるくり返し作業入門　前編』. （サークル名：ヤサイゼリー）, オンライン版:https://izunyan.github.io/gisho12/ただし，ライセンスの適用は本書での著作部分のみとなり，用いているデータやパッケージや画像などはそれぞれのライセンスに準じる","code":""},{"path":"index.html","id":"association","chapter":"はじめに","heading":"関連情報","text":"『Rで読むExcelファイル』\n技術書典9で頒布したRでのExcelおよびcsvファイル読み込み解説本\ngithubレポジトリ\n技術書典9で頒布したRでのExcelおよびcsvファイル読み込み解説本githubレポジトリggplot2の辞書\n視覚化のためのggplot2パッケージの辞書的メモ\n視覚化のためのggplot2パッケージの辞書的メモ","code":""},{"path":"premise.html","id":"premise","chapter":"1 前提知識","heading":"1 前提知識","text":"ここに出てくる用語は初学者にとってなじみがないものばかりかもしれないが，Rでなるべくがんばらず（人力に頼らず）にデータ加工をできるようになるためには避けて通れないこれ以降はここで解説した用語を説明なしに解説に使うので，分からない言葉に出くわしたらここに戻ってこよう","code":""},{"path":"premise.html","id":"p-howtouse-rst","chapter":"1 前提知識","heading":"1.1 RStudioの使い方","text":"","code":""},{"path":"premise.html","id":"p-opening","chapter":"1 前提知識","heading":"1.1.1 起動画面","text":"RStudioを最初に起動すると大体Figure1.1のような画面になる\nFigure 1.1: RStudioの起動画面\n","code":""},{"path":"premise.html","id":"p-theme","chapter":"1 前提知識","heading":"1.1.2 見た目の変更","text":"好みまたは目に優しい画面にするため，RStudioの色合いを下記から変更できる\nメニューのTools > Global Options > Appearance > Editor themeから選び，OKを押す（Figure1.2）\n筆者はTommorow Night Brightを使用\n以下の説明は変更後の画面で示す\nメニューのTools > Global Options > Appearance > Editor themeから選び，OKを押す（Figure1.2）筆者はTommorow Night Brightを使用以下の説明は変更後の画面で示す\nFigure 1.2: テーマの設定画面\n","code":""},{"path":"premise.html","id":"p-howtorun","chapter":"1 前提知識","heading":"1.1.3 コードの実行の仕方","text":"コンソールに直接コードを入力し出力を確認できる（Figure1.3）\nちょっとした確認には便利だが，たくさん書きたい時や，内容を保存したい時は不向き\nちょっとした確認には便利だが，たくさん書きたい時や，内容を保存したい時は不向き\nFigure 1.3: コンソールに直接\nR Scriptに書くと，たくさん書けるし保存も簡単でおすすめ。色分けもされる慣れたらR Markdownを使うとhtmlレポートにまとめやすくなりもっと便利になるFigure1.4の左上の〇で囲んである緑＋がついているアイコンから，またはFile > New file > R ScriptでR Scriptを開く\nFigure 1.4: Rスクリプトを開く\nR Scriptを開くとデフォルトでは左上にウィンドウ（ペインと呼ばれる）が開き，ここにコードを記述できる（Figure1.5）\nFigure 1.5: Rスクリプトに書く\n","code":""},{"path":"premise.html","id":"p-utf8","chapter":"1 前提知識","heading":"1.1.4 Windowsユーザーにつきものの文字化け対策","text":"Windowsだけの問題かもしれず，今後はもしかしたら不要になっていくかもしれないが，Windows10以前の場合，RStudio上で文字コードをUTF-8に指定しておく方が文字化けに悩まなくてすみそうメニューのTools > Global Options > Code > Saving > Default text encodingからUTF-8選び，OKを押す（Figure1.6）同様にTools > Project Options > Code Editing > Text encodingのところもUTF-8にしておく上記設定をした後で，他の環境で作られたR ScriptファイルやR Markdownファイルを開くときに文字化けする場合は，File > Reopen EncodingからCP932（つまりShift-JIS）を選ぶとうまくいくかもしれない\nFigure 1.6: 文字エンコーディングの指定\n","code":""},{"path":"premise.html","id":"p-howtoread","chapter":"1 前提知識","heading":"1.2 本書に出てくるコード部分の見方","text":"グレーの背景部分はRのコードが書いてあり，その下の##で始まる部分は出力結果を表すここでは1 + 1がコード部分で，## [1] 2が出力結果部分[1]というのは，その次にくる値（ここでは１つしかないが）が何番目にあるかを示しているたとえば，1から50までの数値を出力してみる\nコロン:で最初と最後の値をつなぐことで連番を表現できる\nコロン:で最初と最後の値をつなぐことで連番を表現できるコード部分に#で始まる文章がある場合は，コメントを表す。ここは実行されないので説明のために書かれる","code":"\n1 + 1## [1] 2\n1:50##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n# *（アスタリスク） は掛け算であることを示す\n\n2 * 3  # ここにもコメントを入れられる## [1] 6"},{"path":"premise.html","id":"p-package","chapter":"1 前提知識","heading":"1.3 パッケージ","text":"様々な関数やデータなどがまとまっていて，読み込むと色々なことができる\n逆にいえば読み込まないと便利な作業ができないことが多い\n逆にいえば読み込まないと便利な作業ができないことが多い例えばlibrary(tidyverse)またはrequire(tidyverse) のように書くことで読み込めるパッケージを読み込まなくても，「パッケージ名::関数名()」でパッケージ内の関数が使える\nどのパッケージの関数か明示するのにも便利なので，本書では多用する\n以下，例えば「パッケージdplyrの関数select()」はdplyr::select()と表現することがある\nどのパッケージの関数か明示するのにも便利なので，本書では多用する以下，例えば「パッケージdplyrの関数select()」はdplyr::select()と表現することがあるモダンなRのデータ加工に必須なパッケージをまとめて読み込んでくれるtidyverseをまず読み込んでおく\n以降のコードはすべてtidyverseを読み込んだ前提で進める\n本書では明示しない限り，すべてtidyverseを読み込めば使えるパッケージを用いている\n以降のコードはすべてtidyverseを読み込んだ前提で進める本書では明示しない限り，すべてtidyverseを読み込めば使えるパッケージを用いているインストールされているパッケージはRStudioのデフォルト画面で右下にあるウィンドウ（ペインと呼ぶ）のパッケージタブで確認可能入っていないパッケージは，インターネットにつながっていれば以下の方法でインストールできる\nパッケージタブのinstallをクリックして出てくるウィンドウでパッケージ名を入力（Figure1.7）\nコマンドからinstall.packages(\"パッケージ名をここに入れる\")\nパッケージタブのinstallをクリックして出てくるウィンドウでパッケージ名を入力（Figure1.7）コマンドからinstall.packages(\"パッケージ名をここに入れる\")\nFigure 1.7: パッケージタブからのインストール\n","code":"\nlibrary(tidyverse)"},{"path":"premise.html","id":"p-function","chapter":"1 前提知識","heading":"1.4 関数","text":"データ加工においてほとんどの人は絶対お世話になるもの\n適切な値や変数などを指定すれば，データの処理や計算，統計解析など様々な処理を簡単に実行してくれる\nデータ加工の技術は，色々な便利関数をどの場面でどうやって使うかにつきる\n適切な値や変数などを指定すれば，データの処理や計算，統計解析など様々な処理を簡単に実行してくれるデータ加工の技術は，色々な便利関数をどの場面でどうやって使うかにつきる例えばmean()などのように「関数名()」で出てくるので，()で囲まれてる所を見たらほぼ関数だと思えばよさそう\n本書の2章～6章はすべて基本関数の解説\n本書の2章～6章はすべて基本関数の解説()の中に入る値を引数（ひきすう）と呼ぶ引数は「,」でつないで追加していき，これによって実行したい処理のカスタマイズが可能\n関数の()の最初の位置に来るものを第一引数という\n関数の()の最初の位置に来るものを第一引数という関数の()内でtabキーを押せば，欲しいものが出てくることがある\n例：select()での候補変数，mean()での引数na.rm =など\n例：select()での候補変数，mean()での引数na.rm =など","code":""},{"path":"premise.html","id":"p-function-ex","chapter":"1 前提知識","heading":"1.4.1 関数の例","text":"","code":""},{"path":"premise.html","id":"p-function-ex-c","chapter":"1 前提知識","heading":"1.4.1.1 複数のものを1つにする: c()","text":"ベクトルを作る（複数のものを1つにする）ための関数\nベクトルと聞くと数学苦手だった人はいやな記憶を思い出すかもしれないが，Rではとにかく「複数のものを１つにしたもの」と理解しておけば何となると思う\nベクトルと聞くと数学苦手だった人はいやな記憶を思い出すかもしれないが，Rではとにかく「複数のものを１つにしたもの」と理解しておけば何となると思うc()は慣れてる人は当たり前に使っているので，あまり解説されない気がするが，初学者にとってまず理解すべき最重要関数と思われるベクトルは，1.6）で解説するデータフレームでの列単位のデータを扱う際にも有用","code":"\nc(1,2,3)## [1] 1 2 3\nc(\"a\", \"b\", \"c\") # \" \"で囲まれる値は文字を表す## [1] \"a\" \"b\" \"c\"\n# 複数あるように見えるが実は1つのベクトルになっている例\n1:10##  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"premise.html","id":"p-function-ex-m","chapter":"1 前提知識","heading":"1.4.1.2 平均値：mean()","text":"引数にベクトルを入れることで平均値を計算する1つのベクトルはデータフレームの1つの列（変数）の単位と同じなので，ここでは横に並んでいるがデータフレーム的にイメージしたら縦に並んでるとみなすと分かりやすいかも\nFigure 1.8: ベクトルのイメージ\n","code":"\nmean(c(1,2,3))## [1] 2\n# 欠損値（NA）があると結果がNA\nmean(c(1, NA, 3))## [1] NA\n# 引数にna.rm = TRUEを追加すると結果が出る\n# 基本的に実務上は常につけておいたほうがよい\nmean(c(1, NA, 3), na.rm = TRUE)## [1] 2"},{"path":"premise.html","id":"p-function-make","chapter":"1 前提知識","heading":"1.4.2 【応用編】関数を作る","text":"一連の作業を，値を変えて繰り返したいときに役立つ\nここは最初は難しいかもしれないので，飛ばしても差支えないが，知っておくと3.2.1や5.4.1の重要知識部分や6.4の理解がしやすくなる\n慣れてきてもっと効率的に繰り返し作業したい気分になったら読み返すと役立つ\nここは最初は難しいかもしれないので，飛ばしても差支えないが，知っておくと3.2.1や5.4.1の重要知識部分や6.4の理解がしやすくなる慣れてきてもっと効率的に繰り返し作業したい気分になったら読み返すと役立つ関数名は任意で名づけることができる\n参考：Rの関数定義の基本(RjpWiki)\n参考：Rの関数定義の基本(RjpWiki)","code":""},{"path":"premise.html","id":"p-function-make-ex","chapter":"1 前提知識","heading":"1.4.2.1 基本例：x + 1でxに入る数字を変えていって結果を出力する","text":"「自分で名づける関数名 <- function(引数){ 計算式やコード }」 で関数を定義できる関数の引数に数値を入れたら，その数値に1を加算する関数を作成\nまずここでは，関数名としてadd_oneと名付けたオブジェクトを作成\nfunction()の()内に，引数として入れる内容を指定する\n{}内に処理したい式やコードを入れる\n作成したadd_one()関数に引数を入れて実行する\nまずここでは，関数名としてadd_oneと名付けたオブジェクトを作成function()の()内に，引数として入れる内容を指定する{}内に処理したい式やコードを入れる作成したadd_one()関数に引数を入れて実行する","code":"\nadd_one <- \n  function(x){\n    x + 1\n  }\n\nadd_one(1)## [1] 2\nadd_one(2)## [1] 3"},{"path":"premise.html","id":"p-function-make-anonymous","chapter":"1 前提知識","heading":"1.4.2.2 無名関数（anonymous function）","text":"このあたりの内容は無名関数（または匿名関数）の記法でよく使われる，ラムダ式(lambda expression)と呼ばれることもある関数名を定義しなくても実行できる。{}がなくても動く\n他の関数の中で（例：across(); 5.4.1参照）使われる際は不要だが，ここだけで実行する場合はfunction() x + 1部分を()で囲む必要がある\n他の関数の中で（例：across(); 5.4.1参照）使われる際は不要だが，ここだけで実行する場合はfunction() x + 1部分を()で囲む必要がある右端の部分の()に引数を入れることで実行できるR 4.1.0より，functionを省略してバックスラッシュ\\で示せるようになったpurrr 1.0.0では，従来の~と.xを使った記法から，無名関数の\\(x) とxを使う書き方に移行した（参考：purrr 1.0.0 Docmentation）\nこれにより，本書で中心的に扱う繰り返し作業の記法もこれに対応する\nこれにより，本書で中心的に扱う繰り返し作業の記法もこれに対応する","code":"\n(function(x) x+1)(1)## [1] 2\n(function(x) x+1)(2)## [1] 3\n(\\(x) x+1)(1)## [1] 2"},{"path":"premise.html","id":"p-object","chapter":"1 前提知識","heading":"1.5 オブジェクト","text":"Pythonなどの他言語では変数3と呼ばれるものに該当計算の結果や，複数の数値や文字など（他にも色々）を1つの文字列に格納することができ，その後のコードで活用できる<-の矢印の先にあるのがオブジェクト。RStudioではショートカットalt + -で出せる(MacはOption + -)この後説明するデータフレームもオブジェクトに入れられる\nデータの少ないミニデータを作る時や，計算結果を格納するときに多用\nデータの少ないミニデータを作る時や，計算結果を格納するときに多用","code":""},{"path":"premise.html","id":"p-object-ex","chapter":"1 前提知識","heading":"1.5.1 例","text":"","code":"\nres <- 1 + 1\nres## [1] 2\nres2 <- c(1, 2:4, 5)\nres2## [1] 1 2 3 4 5\nres3 <- c(\"a\", \"b\")\nres3## [1] \"a\" \"b\"\n# この後は不要なので削除\nrm(res, res2, res3)"},{"path":"premise.html","id":"p-df","chapter":"1 前提知識","heading":"1.6 データフレーム","text":"行（別名：ケース；オブザベーション；レコード）と列（別名：変数；カラム）4が碁盤の目のようになった集まりの形のデータ\nExcelで表現するのであれば通常1行目に列名が入り、2行目以降が個別のケース（データ）を表す形（Figure1.9）。Rのデータフレームでは列名は別途与えられ，1行目からケースが表される（Figure1.10）\nExcelで表現するのであれば通常1行目に列名が入り、2行目以降が個別のケース（データ）を表す形（Figure1.9）。Rのデータフレームでは列名は別途与えられ，1行目からケースが表される（Figure1.10）データ解析において便利で分かりやすいため、本書ではデータフレームの形で説明していく\nRのモダンな方法では，データの加工や統計処理のプロセスをデータフレームの形で返すことが多い\nRのモダンな方法では，データの加工や統計処理のプロセスをデータフレームの形で返すことが多い解析すべきデータがデータフレーム上に整えられているような状態をtidy(読み：タイディー，意味：整然)と呼び，データ解析において理想的な形とされている\nFigure 1.9: Excel画面風なイメージ\n\nFigure 1.10: Rのデータフレーム(tibble形式)\nオブジェクトに格納することで，別のデータフレームを作れる列単位で取り出すとベクトルになる\n例：bill_length_mmは次のようなベクトルで表現できる　c(39.1, 39.5, 40.3, NA …)\n例：bill_length_mmは次のようなベクトルで表現できる　c(39.1, 39.5, 40.3, NA …)本書では，データフレームの中でも表示に便利なtibble形式を使う\nデフォルトでは最初の10行が表示されるが，本書では紙面の都合上，表示行数をしぼっている\nデフォルトでは最初の10行が表示されるが，本書では紙面の都合上，表示行数をしぼっている","code":""},{"path":"premise.html","id":"p-df-main","chapter":"1 前提知識","heading":"1.6.1 本書で使う主なデータ例","text":"","code":""},{"path":"premise.html","id":"p-df-main-p","chapter":"1 前提知識","heading":"1.6.1.1 ペンギンデータ","text":"palmerpenguinsパッケージのpenguinsデータ（CC0）\n最初からtibble形式になっている\n最初からtibble形式になっているデータフレーム名を打ち込めばそのまま表示できる\ntibble形式でないデータフレームで大きなものに対して実行すると，Consoleの出力がうまって大変になることもある\ntibble形式でないデータフレームで大きなものに対して実行すると，Consoleの出力がうまって大変になることもあるtibble形式のデータフレームの出力の見方\n出力の最上段にあるA tibble: 344 x 8で，tibble形式のデータフレーム，344行 × 8列という情報が分かる\n\n変数名の下の行にある<fct>, <dbl>, <int>は変数の型を示し，それぞれ因子型，数値型，整数型であることを示している。詳しくは5.3で説明する\n\n\n\n\n\n\n出力の最上段にあるA tibble: 344 x 8で，tibble形式のデータフレーム，344行 × 8列という情報が分かる\n変数名の下の行にある<fct>, <dbl>, <int>は変数の型を示し，それぞれ因子型，数値型，整数型であることを示している。詳しくは5.3で説明する\n\n\n\n\n\nより大きいデータフレームで情報が多い場合の出力例を次に示すtibble形式のデータフレームの出力の見方\nIndiv…² のように，長い変数名は…と数字で省略して表示され，フルネームは脚注に数字に対応させて表示される\nデータフレーム下の１行目にある\n… 341 rows, 9 variables:\nで，さらに341行と9列が非表示であることが分かる\n非表示になった変数名は\nDate Egg <date>, Culmen Length (mm) <dbl>\nのように最下部に表示される\ntibble形式のデータフレームの出力の見方Indiv…² のように，長い変数名は…と数字で省略して表示され，フルネームは脚注に数字に対応させて表示されるデータフレーム下の１行目にある\n… 341 rows, 9 variables:\nで，さらに341行と9列が非表示であることが分かる非表示になった変数名は\nDate Egg <date>, Culmen Length (mm) <dbl>\nのように最下部に表示される本書では最初の3行の表示のみに絞っているが，出力されるデータフレームの実行結果はデフォルトで10行表示される。任意の行数を表示させたい場合は，print()関数を使う本書では最初の3行の表示のみに絞っているが，出力されるデータフレームの実行結果はデフォルトで10行表示される。任意の行数を表示させたい場合は，print()関数を使う例：最初の15行のみ表示させる例：最初の15行のみ表示させる","code":"\n# パッケージが入ってなければ下記実行\n# install.packages(\"palmerpenguins\")\n\npalmerpenguins::penguins## # A tibble: 344 × 8\n##   species island    bill_le…¹ bill_…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>         <dbl>   <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen      39.1    18.7     181    3750 male   2007\n## 2 Adelie  Torgersen      39.5    17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen      40.3    18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​bill_length_mm, ²​bill_depth_mm, ³​flipper_length_mm,\n## #   ⁴​body_mass_g\npalmerpenguins::penguins_raw## # A tibble: 344 × 17\n##   studyName Sample …¹ Species Region Island Stage Indiv…² Clutc…³\n##   <chr>         <dbl> <chr>   <chr>  <chr>  <chr> <chr>   <chr>  \n## 1 PAL0708           1 Adelie… Anvers Torge… Adul… N1A1    Yes    \n## 2 PAL0708           2 Adelie… Anvers Torge… Adul… N1A2    Yes    \n## 3 PAL0708           3 Adelie… Anvers Torge… Adul… N2A1    Yes    \n## # … with 341 more rows, 9 more variables: `Date Egg` <date>,\n## #   `Culmen Length (mm)` <dbl>, `Culmen Depth (mm)` <dbl>,\n## #   `Flipper Length (mm)` <dbl>, `Body Mass (g)` <dbl>,\n## #   Sex <chr>, `Delta 15 N (o/oo)` <dbl>,\n## #   `Delta 13 C (o/oo)` <dbl>, Comments <chr>, and abbreviated\n## #   variable names ¹​`Sample Number`, ²​`Individual ID`,\n## #   ³​`Clutch Completion`\npalmerpenguins::penguins  |>  \n  print(n = 15)## # A tibble: 344 × 8\n##    species island    bill_l…¹ bill_…² flipp…³ body_…⁴ sex    year\n##    <fct>   <fct>        <dbl>   <dbl>   <int>   <int> <fct> <int>\n##  1 Adelie  Torgersen     39.1    18.7     181    3750 male   2007\n##  2 Adelie  Torgersen     39.5    17.4     186    3800 fema…  2007\n##  3 Adelie  Torgersen     40.3    18       195    3250 fema…  2007\n##  4 Adelie  Torgersen     NA      NA        NA      NA <NA>   2007\n##  5 Adelie  Torgersen     36.7    19.3     193    3450 fema…  2007\n##  6 Adelie  Torgersen     39.3    20.6     190    3650 male   2007\n##  7 Adelie  Torgersen     38.9    17.8     181    3625 fema…  2007\n##  8 Adelie  Torgersen     39.2    19.6     195    4675 male   2007\n##  9 Adelie  Torgersen     34.1    18.1     193    3475 <NA>   2007\n## 10 Adelie  Torgersen     42      20.2     190    4250 <NA>   2007\n## 11 Adelie  Torgersen     37.8    17.1     186    3300 <NA>   2007\n## 12 Adelie  Torgersen     37.8    17.3     180    3700 <NA>   2007\n## 13 Adelie  Torgersen     41.1    17.6     182    3200 fema…  2007\n## 14 Adelie  Torgersen     38.6    21.2     191    3800 male   2007\n## 15 Adelie  Torgersen     34.6    21.1     198    4400 male   2007\n## # … with 329 more rows, and abbreviated variable names\n## #   ¹​bill_length_mm, ²​bill_depth_mm, ³​flipper_length_mm,\n## #   ⁴​body_mass_g"},{"path":"premise.html","id":"p-pipe","chapter":"1 前提知識","heading":"1.7 |>または%>%（パイプ演算子）","text":"名前はパイプで発音は”” （参照）コードを読みやすくするための便利な機能を持つ演算子。初めてみた人は全然わからないと思うが，この本を読んでコードを書きはじめてみたらこれなしではいられなくなるくらいお世話になると思う\n主に使用が想定される場面でざっくりいうと，「このデータフレームに対して|>の後にある関数を適用する」という機能\n具体的な使用法は2.2.1で解説\n最近は特にパッケージを読み込まなくても使える|>(base pipe, native pipe)を使う説明が多くなった。\n%>%(magrittr pipe)はtidyverseパッケージを読み込めば使えて，こちらが必要になる特殊なケースもある\n\n主に使用が想定される場面でざっくりいうと，「このデータフレームに対して|>の後にある関数を適用する」という機能具体的な使用法は2.2.1で解説最近は特にパッケージを読み込まなくても使える|>(base pipe, native pipe)を使う説明が多くなった。\n%>%(magrittr pipe)はtidyverseパッケージを読み込めば使えて，こちらが必要になる特殊なケースもある\n%>%(magrittr pipe)はtidyverseパッケージを読み込めば使えて，こちらが必要になる特殊なケースもあるRStudioのショートカットはCtrl + Shift + M(MacはCmd + Shift + M)。たぶん，RStudio以外でもこのショートカット押してしまうぐらい中毒性がある\n現時点ではRStudioのデフォルトのショートカットで出るのは%>%だが，|>に切り替えたい場合は，RStudioのTools > Global Options > Code > Editing > use native pipe operatorにチェックを入れる\n現時点ではRStudioのデフォルトのショートカットで出るのは%>%だが，|>に切り替えたい場合は，RStudioのTools > Global Options > Code > Editing > use native pipe operatorにチェックを入れる","code":""},{"path":"premise.html","id":"p-project","chapter":"1 前提知識","heading":"1.8 プロジェクト","text":"本書の内容では使わなくても問題ないが，自身のデータを読み書きする際には非常に便利なので，解説しておくデータを加工して解析する際に、1つのフォルダ（サブフォルダも含む）の中に関連するデータやコードなどをまとめておき、そのフォルダをプロジェクトと設定する\nこれにより、ファイルの読み書きの際の場所指定をいちいち意識しないで作業できるようになる\nこれにより、ファイルの読み書きの際の場所指定をいちいち意識しないで作業できるようになるRStudio画面の右上にProject設定のメニューがある（Figure1.11）\nProject (None) > New Project > Existing Directoryと選び，プロジェクトにしたいフォルダを設定する\nProject (None) > New Project > Existing Directoryと選び，プロジェクトにしたいフォルダを設定する\nFigure 1.11: プロジェクトの設定\n","code":""},{"path":"premise.html","id":"p-help","chapter":"1 前提知識","heading":"1.9 困ったときは","text":"関数の使い方，引数の入れ方は大抵忘れるので，ヘルプのexampleを見て思い出す場合が多い\nコンソールに「?関数名」のように入れて実行する（例：?rename）と右下ペインのHelpタブに情報が出てくる\n右下ペインのHelpタブで検索する（Figure1.12）\nコンソールに「?関数名」のように入れて実行する（例：?rename）と右下ペインのHelpタブに情報が出てくる右下ペインのHelpタブで検索する（Figure1.12）チートシートを見る\nメニューのHelp > Cheat Sheets > Browse Cheat Sheetsから掲載サイトに行ける\nメニューのHelp > Cheat Sheets > Browse Cheat Sheetsから掲載サイトに行けるエラーメッセージを\" \"で囲んでググる（フレーズ検索）r-wakalangの#r_beginnersチャンネルで質問する\nFigure 1.12: ヘルプの確認\n","code":""},{"path":"select.html","id":"select","chapter":"2 列（変数）を選ぶ：select","heading":"2 列（変数）を選ぶ：select","text":"本章のポイント\nパッケージdplyrの関数select()\ntidyな世界では「列 = 変数」\n変数が多い時に関心ある変数に限定したデータにしたい\n関心ある変数の名前を取得したい\n後々出てくる繰り返し作業で便利なヘルパー関数について知る\nパッケージdplyrの関数select()tidyな世界では「列 = 変数」変数が多い時に関心ある変数に限定したデータにしたい関心ある変数の名前を取得したい後々出てくる繰り返し作業で便利なヘルパー関数について知る","code":""},{"path":"select.html","id":"select-read","chapter":"2 列（変数）を選ぶ：select","heading":"2.1 使用データ","text":"データの指定を簡単にするために，penguinsデータをdfと読み込む\npalmerpenguins::penguinsというのは，「palmerpenguinsパッケージのpenguinsデータ」という意味\npalmerpenguins::penguinsというのは，「palmerpenguinsパッケージのpenguinsデータ」という意味読み込みの様々な方法については多くの説明が必要になるので，拙書『Rで読むExcelファイル』参照","code":"\ndf <- \n  palmerpenguins::penguins\n\n# データの表示  \ndf ## # A tibble: 344 × 8\n##   species island    bill_le…¹ bill_…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>         <dbl>   <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen      39.1    18.7     181    3750 male   2007\n## 2 Adelie  Torgersen      39.5    17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen      40.3    18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​bill_length_mm, ²​bill_depth_mm, ³​flipper_length_mm,\n## #   ⁴​body_mass_g"},{"path":"select.html","id":"select-standard","chapter":"2 列（変数）を選ぶ：select","heading":"2.2 基本","text":"表示させたい変数名（列名）をselect()の中に「,」をつけて並べる\n変数は1つからOK\n変数は1つからOK|>についてはすでに1.7で説明したが，この後また補足を説明するのでまずは何も考えずに使ってみよう以降すべてtidyverseパッケージを読み込んだ前提で進める（1.3参照）新しいデータフレームを作りたい場合は<-を使って新しいオブジェクトに格納する","code":"\nlibrary(tidyverse)\n\ndf |> \n  select(bill_length_mm, bill_depth_mm)## # A tibble: 344 × 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # … with 341 more rows\ndf2 <- \n  df |> select(bill_length_mm)\n\ndf2## # A tibble: 344 × 1\n##   bill_length_mm\n##            <dbl>\n## 1           39.1\n## 2           39.5\n## 3           40.3\n## # … with 341 more rows\n# 一時的に見せただけなので削除\nrm(df2)"},{"path":"select.html","id":"select-standard-pipe","chapter":"2 列（変数）を選ぶ：select","heading":"2.2.1 【補足】|> の意味","text":"1.7で説明したパイプ演算子の実例を解説する基本的にselect()を始めとしたモダンなRの処理は，以下のように第一引数にデータフレームを指定する|>の役割は，その左側にあるものを右側の関数の第一引数に入れる，ということなので，第一引数にデータフレームが来ることが決まっていれば，常に次のようにかける重要な点として，このコードの処理の結果もデータフレームとなるので，さらに|>でつなげていくことができるこのようにすると複雑な処理を重ねていく場合も，コードの可読性が高まるので，コードを共有してチーム作業するデータ加工の過程で有用","code":"\nselect(df, bill_length_mm)## # A tibble: 344 × 1\n##   bill_length_mm\n##            <dbl>\n## 1           39.1\n## 2           39.5\n## 3           40.3\n## # … with 341 more rows\ndf |> \n  select(bill_length_mm)## # A tibble: 344 × 1\n##   bill_length_mm\n##            <dbl>\n## 1           39.1\n## 2           39.5\n## 3           40.3\n## # … with 341 more rows\ndf |> \n  select(bill_length_mm) |> \n  names()## [1] \"bill_length_mm\""},{"path":"select.html","id":"select-range","chapter":"2 列（変数）を選ぶ：select","heading":"2.2.2 範囲指定","text":"表示させたい変数がデータフレーム上に順番に並んでいれば，その並びの最初の列名と最後の変数名を:（コロン）でつなげて取得できる\n変数の連番をまとめて指定する時などに便利（例 設問1:設問100）\n変数の連番をまとめて指定する時などに便利（例 設問1:設問100）範囲に加えて追加の変数も「,」でつないで含めることができる\n飛び飛びの変数群を選びたいときに有用\n飛び飛びの変数群を選びたいときに有用","code":"\ndf |> \n  select(bill_length_mm:flipper_length_mm)## # A tibble: 344 × 3\n##   bill_length_mm bill_depth_mm flipper_length_mm\n##            <dbl>         <dbl>             <int>\n## 1           39.1          18.7               181\n## 2           39.5          17.4               186\n## 3           40.3          18                 195\n## # … with 341 more rows\ndf |> \n  select(bill_length_mm:flipper_length_mm, sex)## # A tibble: 344 × 4\n##   bill_length_mm bill_depth_mm flipper_length_mm sex   \n##            <dbl>         <dbl>             <int> <fct> \n## 1           39.1          18.7               181 male  \n## 2           39.5          17.4               186 female\n## 3           40.3          18                 195 female\n## # … with 341 more rows"},{"path":"select.html","id":"select-cha","chapter":"2 列（変数）を選ぶ：select","heading":"2.2.3 中身が文字でも動く","text":"変数名が\" \"で囲われていると，Rでは文字(character)だと認識されるselect()は文字の変数名を与えても動くこれは効率化を図りたいときに重要な特徴select()の中にたくさんの変数名を並べるより，事前に指定しておきベクトルとして代入した方が読みやすい\nあらかじめ作成したベクトルとして代入するときは，all_of()で囲む必要がある\n様々なコード例でこの事前指定が多用されるので慣れるとよい\nあらかじめ作成したベクトルとして代入するときは，all_of()で囲む必要がある様々なコード例でこの事前指定が多用されるので慣れるとよいここでvarsは文字ベクトル（vector）のオブジェクトとなっている（文字じゃないとエラーになるため）all_of()の中に文字ベクトルを指定することで，それぞれの中身を変数名として認識する\n以前使われていたone_ofは現在は非推奨\n以前使われていたone_ofは現在は非推奨","code":"\ndf |> \n  select(\"bill_length_mm\", \"bill_depth_mm\")## # A tibble: 344 × 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # … with 341 more rows\n# あらかじめオブジェクト（ここではvars）に変数名の文字列を格納して後で使えるようにする\nvars <- c(\"bill_length_mm\", \"bill_depth_mm\")\n\ndf |> \n  select(all_of(vars))## # A tibble: 344 × 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # … with 341 more rows"},{"path":"select.html","id":"練習問題","chapter":"2 列（変数）を選ぶ：select","heading":"2.2.4 [練習問題]","text":"dfデータで変数speciesからbill_length_mmまでの並び，およびyearの計4列にしてデータフレームを表示させようdfデータで変数speciesからbill_length_mmまでの並び，およびyearの計4列にしてデータフレームを表示させようdfデータで変数bill_length_mmからbody_mass_gまでの並びの計4列を文字ベクトルにしたうえでselectで選んでデータフレームを表示させよう(冗長な作業に見えるがこの考え方が役に立つ時がくるはず)dfデータで変数bill_length_mmからbody_mass_gまでの並びの計4列を文字ベクトルにしたうえでselectで選んでデータフレームを表示させよう(冗長な作業に見えるがこの考え方が役に立つ時がくるはず)","code":""},{"path":"select.html","id":"select-helper","chapter":"2 列（変数）を選ぶ：select","heading":"2.3 変数の指定に便利なヘルパー関数","text":"selection helperと呼ばれるtidyselectパッケージの関数群select()の所で解説されることが多いが，5.3.2で出てくるacross()と併せた活用場面が多いため，なじんでおくと後から楽になる","code":""},{"path":"select.html","id":"select-helper1","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.1 変数名の最初の文字列","text":"billから始まる変数を選ぶ","code":"\ndf |>\n  select(starts_with(\"bill\"))## # A tibble: 344 × 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # … with 341 more rows"},{"path":"select.html","id":"select-helper2","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.2 変数名の最後の文字列","text":"_mmで終わる変数を選ぶ\nmmだけだと他にも含まれる場合が出てくるので，「_」も含めた方が安全\nmmだけだと他にも含まれる場合が出てくるので，「_」も含めた方が安全","code":"\ndf |>\n  select(ends_with(\"_mm\"))## # A tibble: 344 × 3\n##   bill_length_mm bill_depth_mm flipper_length_mm\n##            <dbl>         <dbl>             <int>\n## 1           39.1          18.7               181\n## 2           39.5          17.4               186\n## 3           40.3          18                 195\n## # … with 341 more rows"},{"path":"select.html","id":"select-helper3","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.3 変数名のどこかに含まれる文字列","text":"","code":""},{"path":"select.html","id":"固定した文字列","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.3.1 固定した文字列","text":"指定した文字列を含んだ変数名を対象とする","code":"\ndf |>\n  select(contains(\"length\"))## # A tibble: 344 × 2\n##   bill_length_mm flipper_length_mm\n##            <dbl>             <int>\n## 1           39.1               181\n## 2           39.5               186\n## 3           40.3               195\n## # … with 341 more rows"},{"path":"select.html","id":"select-helper4","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.3.2 柔軟な文字列","text":"文字列で 正規表現 が使えるため柔軟な指定が可能ここでは，“length”または”depth”を含む変数名を対象\n|が「または」を意味する\n|が「または」を意味する","code":"\ndf |>\n  select(matches(\"length|depth\"))## # A tibble: 344 × 3\n##   bill_length_mm bill_depth_mm flipper_length_mm\n##            <dbl>         <dbl>             <int>\n## 1           39.1          18.7               181\n## 2           39.5          17.4               186\n## 3           40.3          18                 195\n## # … with 341 more rows"},{"path":"select.html","id":"select-helper5","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.4 上記の組み合わせ","text":"","code":""},{"path":"select.html","id":"select-helper5-1","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.4.1 かつ","text":"それぞれの条件を両方満たす","code":"\ndf |>\n  select(starts_with(\"bill\") & contains(\"length\"))## # A tibble: 344 × 1\n##   bill_length_mm\n##            <dbl>\n## 1           39.1\n## 2           39.5\n## 3           40.3\n## # … with 341 more rows"},{"path":"select.html","id":"select-helper5-2","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.4.2 または","text":"それぞれの条件をいずれか満たす","code":"\ndf |>\n  select(starts_with(\"bill\") | contains(\"length\"))## # A tibble: 344 × 3\n##   bill_length_mm bill_depth_mm flipper_length_mm\n##            <dbl>         <dbl>             <int>\n## 1           39.1          18.7               181\n## 2           39.5          17.4               186\n## 3           40.3          18                 195\n## # … with 341 more rows"},{"path":"select.html","id":"練習問題-1","chapter":"2 列（変数）を選ぶ：select","heading":"2.3.5 [練習問題]","text":"dfデータで”s”で終わる変数を選んでデータフレームを表示させよう","code":""},{"path":"select.html","id":"select-drop","chapter":"2 列（変数）を選ぶ：select","heading":"2.4 特定の変数を選ばない（落とす）","text":"変数名の前に!をつける複数列を落としたい場合は，!c()の中に対象の列名を含めるヘルパー関数に対しても使える","code":"\ndf |> \n  select(!species)## # A tibble: 344 × 7\n##   island    bill_length_mm bill_dep…¹ flipp…² body_…³ sex    year\n##   <fct>              <dbl>      <dbl>   <int>   <int> <fct> <int>\n## 1 Torgersen           39.1       18.7     181    3750 male   2007\n## 2 Torgersen           39.5       17.4     186    3800 fema…  2007\n## 3 Torgersen           40.3       18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​bill_depth_mm, ²​flipper_length_mm, ³​body_mass_g\ndf |> \n  select(!c(bill_length_mm:flipper_length_mm, sex))## # A tibble: 344 × 4\n##   species island    body_mass_g  year\n##   <fct>   <fct>           <int> <int>\n## 1 Adelie  Torgersen        3750  2007\n## 2 Adelie  Torgersen        3800  2007\n## 3 Adelie  Torgersen        3250  2007\n## # … with 341 more rows\ndf |> \n  select(!ends_with(\"_mm\"))## # A tibble: 344 × 5\n##   species island    body_mass_g sex     year\n##   <fct>   <fct>           <int> <fct>  <int>\n## 1 Adelie  Torgersen        3750 male    2007\n## 2 Adelie  Torgersen        3800 female  2007\n## 3 Adelie  Torgersen        3250 female  2007\n## # … with 341 more rows"},{"path":"select.html","id":"練習問題-2","chapter":"2 列（変数）を選ぶ：select","heading":"2.4.1 [練習問題]","text":"dfデータで”length”または”depth”を含む変数以外を選んでデータフレームを表示させよう","code":""},{"path":"select.html","id":"select-get","chapter":"2 列（変数）を選ぶ：select","heading":"2.5 関心のある変数名を取得する","text":"データ分析の段階では，関心のある変数名を選択して，それらを代入する作業が頻出変数名手打ちだと時間もかかるしミスもあるので，効率化のために必ずおさえておきたい技術","code":""},{"path":"select.html","id":"select-get-name","chapter":"2 列（変数）を選ぶ：select","heading":"2.5.1 全ての変数名","text":"データフレームの列名（変数名）を表示させたいときはnames()を使う（またはcolnames()）","code":"\ndf |> names()## [1] \"species\"           \"island\"            \"bill_length_mm\"   \n## [4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n## [7] \"sex\"               \"year\""},{"path":"select.html","id":"select-get-obj","chapter":"2 列（変数）を選ぶ：select","heading":"2.5.2 選択した変数名を取得","text":"ベクトルとしてオブジェクトに格納","code":"\nbill_vars <- \n  df |> \n  select(starts_with(\"bill\")) |> \n  names()\n\nbill_vars## [1] \"bill_length_mm\" \"bill_depth_mm\""},{"path":"select.html","id":"select-get-out","chapter":"2 列（変数）を選ぶ：select","heading":"2.5.3 コピペに便利な形式に出力","text":"「,」で区切られた形式で出てくれば必要なものを選んでそのままselect()に入れられるのに…と思った方のための便利関数dput()ベクトルの形としてそのまま出てくるので出力から必要な変数を選んでコピペができる\nnames()で出てくるのと違い，「,」がついているのが地味にうれしい\nnames()で出てくるのと違い，「,」がついているのが地味にうれしい\" \"すらもいらない，という時は，新しくr scriptを開いて，dput()の出力を貼り付けてすべて置換する力技も","code":"\ndf |> \n  select(starts_with(\"b\")) |> # bから始まる変数名\n  names() |> \n  dput()## c(\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\")"},{"path":"rename.html","id":"rename","chapter":"3 列（変数）名を変更する：rename","heading":"3 列（変数）名を変更する：rename","text":"本章のポイント\nパッケージdplyrの関数rename()\ntidyな世界では「列名 = 変数名」\n分かりやすい列名にすることだけでなく，本書の範囲を超えるが複数データの連結や同時処理関連で重要な役割を果たす\n文字を扱うためのパッケージstringrの便利さを学ぶ\nパッケージdplyrの関数rename()tidyな世界では「列名 = 変数名」分かりやすい列名にすることだけでなく，本書の範囲を超えるが複数データの連結や同時処理関連で重要な役割を果たす文字を扱うためのパッケージstringrの便利さを学ぶ","code":""},{"path":"rename.html","id":"rename-standard","chapter":"3 列（変数）名を変更する：rename","heading":"3.1 基本","text":"まずはデータにどういう変数名があるかの確認使用データは2.1で読み込んだdfを使用変更したい変数名を new = old の順に入力する例：bill_length_mmをblmmに変更してみる複数の変数名を変更する場合は，rename()の中に「,」でつなげていく\nでもたくさんある場合に一つ一つ書いていくのは大変\nでもたくさんある場合に一つ一つ書いていくのは大変複数変数を扱うときはrename_with()が便利。以下はそれを用いた例を示していく","code":"\ndf |> names()## [1] \"species\"           \"island\"            \"bill_length_mm\"   \n## [4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n## [7] \"sex\"               \"year\"\n# まだtidyverseパッケージを読み込んでない場合は以下の#を外して実行\n# library(tidyverse)\n\ndf |> \n  rename(blmm = bill_length_mm)## # A tibble: 344 × 8\n##   species island     blmm bill_dept…¹ flipp…² body_…³ sex    year\n##   <fct>   <fct>     <dbl>       <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen  39.1        18.7     181    3750 male   2007\n## 2 Adelie  Torgersen  39.5        17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen  40.3        18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​bill_depth_mm, ²​flipper_length_mm, ³​body_mass_g\ndf |> \n  rename(blmm = bill_length_mm,\n         bdmm = bill_depth_mm)## # A tibble: 344 × 8\n##   species island     blmm  bdmm flipper_len…¹ body_…² sex    year\n##   <fct>   <fct>     <dbl> <dbl>         <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen  39.1  18.7           181    3750 male   2007\n## 2 Adelie  Torgersen  39.5  17.4           186    3800 fema…  2007\n## 3 Adelie  Torgersen  40.3  18             195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​flipper_length_mm, ²​body_mass_g"},{"path":"rename.html","id":"rename-samew","chapter":"3 列（変数）名を変更する：rename","heading":"3.2 同じ語を共通の語で置き換える","text":"変数名の”bill”の部分を日本語の”くちばし”に変更していくまずは基本の知識でできる方法","code":"\ndf |> \n  rename(くちばし_length_mm = bill_length_mm,\n         くちばし_depth_mm = bill_depth_mm)## # A tibble: 344 × 8\n##   species island    くちば…¹ くちば…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>        <dbl>    <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen     39.1     18.7     181    3750 male   2007\n## 2 Adelie  Torgersen     39.5     17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen     40.3     18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​くちばし_length_mm, ²​くちばし_depth_mm, ³​flipper_length_mm,\n## #   ⁴​body_mass_g"},{"path":"rename.html","id":"rename-strreplace1","chapter":"3 列（変数）名を変更する：rename","heading":"3.2.1 【効率化】str_replace()で一括変換(1)","text":"rename_with()は，まず適用したい関数を示し，そのあとに該当する列を選ぶ\n該当する変数を選ぶ部分は，デフォルトで全ての列に対して適用（everything()）となっているので，全ての列に適用したい場合は省略してもよい\n該当する変数を選ぶ部分は，デフォルトで全ての列に対して適用（everything()）となっているので，全ての列に適用したい場合は省略してもよい語の置き換えにstringr::str_replace()を適用してみたい\n第一引数に対して，その次の文字列をその後の文字列に置換する（ここでは”bill” → “くちばし”）\n第一引数に対して，その次の文字列をその後の文字列に置換する（ここでは”bill” → “くちばし”）第一引数の「x」の部分に，その後選ぶ列が入っていく\nこの部分の理解は今すぐできなくてもよいが，学習を進めるためにキーワードだけ示しておくと，無名関数(anonymous function)という処理をしている(1.4.2.2参照)\nこの部分の理解は今すぐできなくてもよいが，学習を進めるためにキーワードだけ示しておくと，無名関数(anonymous function)という処理をしている(1.4.2.2参照)（参考）purrr 1.0.0より前のバージョンでの説明\n第一引数の「.x」の部分に，その後選ぶ変数が入っていく(なおこのような単純な場合はxを省略した「.」だけでも動く）\nこの場合適用したい関数の前には~（チルダ）が必ずつく\n第一引数の「.x」の部分に，その後選ぶ変数が入っていく(なおこのような単純な場合はxを省略した「.」だけでも動く）この場合適用したい関数の前には~（チルダ）が必ずつくデフォルトで全ての列が対象になっているので，実はstarts_with(\"bill\")がなくても動く","code":"\ndf |> \n  rename_with(\\(x) str_replace(x, \"bill\", \"くちばし\"),\n              starts_with(\"bill\"))## # A tibble: 344 × 8\n##   species island    くちば…¹ くちば…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>        <dbl>    <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen     39.1     18.7     181    3750 male   2007\n## 2 Adelie  Torgersen     39.5     17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen     40.3     18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​くちばし_length_mm, ²​くちばし_depth_mm, ³​flipper_length_mm,\n## #   ⁴​body_mass_g\n# purrr 1.0.0より前のバージョンでの書き方\n# df |> \n#   rename_with(~str_replace(.x, \"bill\", \"くちばし\"),\n#               starts_with(\"bill\"))\ndf |> \n  rename_with(\\(x) str_replace(x, \"bill\", \"くちばし\"))## # A tibble: 344 × 8\n##   species island    くちば…¹ くちば…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>        <dbl>    <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen     39.1     18.7     181    3750 male   2007\n## 2 Adelie  Torgersen     39.5     17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen     40.3     18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​くちばし_length_mm, ²​くちばし_depth_mm, ³​flipper_length_mm,\n## #   ⁴​body_mass_g"},{"path":"rename.html","id":"rename-strreplace1-other","chapter":"3 列（変数）名を変更する：rename","heading":"3.2.1.1 【別解】","text":"select()の時のように単にc()の中に変数を指定していくだけでも動く","code":"\ndf |> \n  rename_with(\\(x) str_replace(x, \"bill\", \"くちばし\"),\n              c(bill_length_mm, bill_depth_mm))## # A tibble: 344 × 8\n##   species island    くちば…¹ くちば…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>        <dbl>    <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen     39.1     18.7     181    3750 male   2007\n## 2 Adelie  Torgersen     39.5     17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen     40.3     18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​くちばし_length_mm, ²​くちばし_depth_mm, ³​flipper_length_mm,\n## #   ⁴​body_mass_g"},{"path":"rename.html","id":"練習問題-3","chapter":"3 列（変数）名を変更する：rename","heading":"3.2.2 [練習問題]","text":"dfデータで”_mm”で終わる変数の名前の”_mm”部分を”_ミリ”に一括で変換しよう","code":""},{"path":"rename.html","id":"rename-remove","chapter":"3 列（変数）名を変更する：rename","heading":"3.3 同じ語を削除する","text":"“_mm”を取り除きたい場合，それを削除した変数名を指定すればよいが，たくさんあると大変","code":"\ndf |> \n  rename(bill_length = bill_length_mm,\n         bill_depth  = bill_depth_mm,\n         flipper_length = flipper_length_mm)## # A tibble: 344 × 8\n##   species island    bill_le…¹ bill_…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>         <dbl>   <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen      39.1    18.7     181    3750 male   2007\n## 2 Adelie  Torgersen      39.5    17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen      40.3    18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​bill_length, ²​bill_depth, ³​flipper_length, ⁴​body_mass_g"},{"path":"rename.html","id":"rename-strreplace2","chapter":"3 列（変数）名を変更する：rename","heading":"3.3.1 【効率化】str_replace()で一括変換（2）","text":"str_replace()で変換先に空白「\" \"」を指定すると削除できる","code":"\ndf |> \n  rename_with(\\(x) str_replace(x, \"_mm\", \" \"),\n              ends_with(\"mm\"))## # A tibble: 344 × 8\n##   species island    bill_le…¹ bill_…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>         <dbl>   <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen      39.1    18.7     181    3750 male   2007\n## 2 Adelie  Torgersen      39.5    17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen      40.3    18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​`bill_length `, ²​`bill_depth `, ³​`flipper_length `,\n## #   ⁴​body_mass_g"},{"path":"rename.html","id":"別解","chapter":"3 列（変数）名を変更する：rename","heading":"3.3.1.1 【別解】","text":"stringr::str_remove()の方が直接的\n第一引数についてその次に来る文字列を取り除く\n第一引数についてその次に来る文字列を取り除く","code":"\ndf |> \n  rename_with(\\(x) str_remove(x, \"_mm\"),\n              ends_with(\"mm\"))## # A tibble: 344 × 8\n##   species island    bill_le…¹ bill_…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>         <dbl>   <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen      39.1    18.7     181    3750 male   2007\n## 2 Adelie  Torgersen      39.5    17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen      40.3    18       195    3250 fema…  2007\n## # … with 341 more rows, and abbreviated variable names\n## #   ¹​bill_length, ²​bill_depth, ³​flipper_length, ⁴​body_mass_g"},{"path":"rename.html","id":"練習問題-4","chapter":"3 列（変数）名を変更する：rename","heading":"3.3.2 [練習問題]","text":"dfデータで”_“を含む変数の名前から，”_“をすべて取り除こう（ヒント5）","code":""},{"path":"rename.html","id":"rename-add","chapter":"3 列（変数）名を変更する：rename","heading":"3.4 同じ接尾辞をつける","text":"変数yearで2007年のみのデータに限定し，くちばし（bill）と翼（flipper）の変数名の末に接尾辞”_2007”をつけるrename()の中に全部書いていけばできるが数が多いと大変","code":"\ndf |> \n  filter(year == 2007) |> \n  select(bill_length_mm:flipper_length_mm, year) |> \n  rename(bill_length_mm_2007 = bill_length_mm,\n         bill_depth_mm_2007  = bill_depth_mm,\n         flipper_length_mm_2007 = flipper_length_mm)## # A tibble: 110 × 4\n##   bill_length_mm_2007 bill_depth_mm_2007 flipper_length_m…¹  year\n##                 <dbl>              <dbl>              <int> <int>\n## 1                39.1               18.7                181  2007\n## 2                39.5               17.4                186  2007\n## 3                40.3               18                  195  2007\n## # … with 107 more rows, and abbreviated variable name\n## #   ¹​flipper_length_mm_2007"},{"path":"rename.html","id":"rename-strc","chapter":"3 列（変数）名を変更する：rename","heading":"3.4.1 【効率化】str_c()で一括指定","text":"適用したい関数の中にある「.」の部分に，その後選ぶ変数が入っていくstringr::str_c()で指定した語をくっつけるここでは変数”year”以外すべてなので，“year”に「!」をつけることで変数を指定できる","code":"\ndf |> \n  filter(year == 2007) |> \n  select(bill_length_mm:flipper_length_mm, year) |> \n  rename_with(\\(x) str_c(x, \"_2007\"),\n               !year)## # A tibble: 110 × 4\n##   bill_length_mm_2007 bill_depth_mm_2007 flipper_length_m…¹  year\n##                 <dbl>              <dbl>              <int> <int>\n## 1                39.1               18.7                181  2007\n## 2                39.5               17.4                186  2007\n## 3                40.3               18                  195  2007\n## # … with 107 more rows, and abbreviated variable name\n## #   ¹​flipper_length_mm_2007"},{"path":"rename.html","id":"rename-strc-other","chapter":"3 列（変数）名を変更する：rename","heading":"3.4.1.1 【別解】","text":"変数を選ぶときに該当する単語を持つ変数を選びたければ，ヘルパー関数matches()で正規表現を使って柔軟に選べる","code":"\ndf |> \nfilter(year == 2007) |> \n  rename_with(\\(x) str_c(x, \"_2007\"),\n               matches(\"bill|flipper\"))## # A tibble: 110 × 8\n##   species island    bill_le…¹ bill_…² flipp…³ body_…⁴ sex    year\n##   <fct>   <fct>         <dbl>   <dbl>   <int>   <int> <fct> <int>\n## 1 Adelie  Torgersen      39.1    18.7     181    3750 male   2007\n## 2 Adelie  Torgersen      39.5    17.4     186    3800 fema…  2007\n## 3 Adelie  Torgersen      40.3    18       195    3250 fema…  2007\n## # … with 107 more rows, and abbreviated variable names\n## #   ¹​bill_length_mm_2007, ²​bill_depth_mm_2007,\n## #   ³​flipper_length_mm_2007, ⁴​body_mass_g"},{"path":"rename.html","id":"練習問題-5","chapter":"3 列（変数）名を変更する：rename","heading":"3.4.2 [練習問題]","text":"dfデータの変数yearで2008年のみのデータに限定し，くちばし（bill）と翼（flipper）で始まる変数以外の変数名の頭に”year08_“をつけてみよう","code":""},{"path":"filter.html","id":"filter","chapter":"4 行（ケース）を選ぶ：filter","heading":"4 行（ケース）を選ぶ：filter","text":"パッケージdplyrの関数filter()tidyな世界では「行 = ケース, 個人など（wide形式の場合）」ケースが多い時に関心あるケースに限定したデータにしたいデータフレームとして出力した結果を限定して見るときに使うことが多い気がする","code":""},{"path":"filter.html","id":"使用データ","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.1 使用データ","text":"dplyr::starwarsデータを使用\nスターウォーズのキャラクターのデータ。filter()のヘルプでも例に使用されている\n身長や質量(mass)の連続量データに加え，色や種(species)など豊富なカテゴリを持つ変数がある\nスターウォーズのキャラクターのデータ。filter()のヘルプでも例に使用されている身長や質量(mass)の連続量データに加え，色や種(species)など豊富なカテゴリを持つ変数がある例示しやすくするためspeciesを先頭にしたデータを作成","code":"\nstarwars## # A tibble: 87 × 14\n##   name  height  mass hair_…¹ skin_…² eye_c…³ birth…⁴ sex   gender\n##   <chr>  <int> <dbl> <chr>   <chr>   <chr>     <dbl> <chr> <chr> \n## 1 Luke…    172    77 blond   fair    blue         19 male  mascu…\n## 2 C-3PO    167    75 <NA>    gold    yellow      112 none  mascu…\n## 3 R2-D2     96    32 <NA>    white,… red          33 none  mascu…\n## # … with 84 more rows, 5 more variables: homeworld <chr>,\n## #   species <chr>, films <list>, vehicles <list>,\n## #   starships <list>, and abbreviated variable names\n## #   ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year\ndf_st <- \n  starwars |> \n  select(species, name:homeworld)"},{"path":"filter.html","id":"filter-st","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.2 基本","text":"filter()の引数に論理式（TRUE FALSEになるもの）を入れる\n論理式の部分について，最初の内はselect()に入れるものと違って混乱するかもしれない\n論理式の部分について，最初の内はselect()に入れるものと違って混乱するかもしれない例：speciesが”Droid”のケースのみ選ぶ\nイコールを表すときは「=」を2つつなげる\nイコールを表すときは「=」を2つつなげる例：身長が200以上のケースのみ選ぶ～以外を表すときは!をつけ，この場合は「=」は1つでよい例：種がHumanのケース以外を選ぶ","code":"\ndf_st |> \n  filter(species == \"Droid\")## # A tibble: 6 × 11\n##   species name   height  mass hair_color skin_c…¹ eye_c…² birth…³\n##   <chr>   <chr>   <int> <dbl> <chr>      <chr>    <chr>     <dbl>\n## 1 Droid   C-3PO     167    75 <NA>       gold     yellow      112\n## 2 Droid   R2-D2      96    32 <NA>       white, … red          33\n## 3 Droid   R5-D4      97    32 <NA>       white, … red          NA\n## 4 Droid   IG-88     200   140 none       metal    red          15\n## 5 Droid   R4-P17     96    NA none       silver,… red, b…      NA\n## 6 Droid   BB8        NA    NA none       none     black        NA\n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​skin_color,\n## #   ²​eye_color, ³​birth_year\ndf_st |> \n  filter(height >= 200)## # A tibble: 11 × 11\n##    species  name     height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##    <chr>    <chr>     <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n##  1 Human    Darth V…    202   136 none    white   yellow     41.9\n##  2 Wookiee  Chewbac…    228   112 brown   unknown blue      200  \n##  3 Droid    IG-88       200   140 none    metal   red        15  \n##  4 Gungan   Roos Ta…    224    82 none    grey    orange     NA  \n##  5 Gungan   Rugor N…    206    NA none    green   orange     NA  \n##  6 Quermian Yarael …    264    NA none    white   yellow     NA  \n##  7 Kaminoan Lama Su     229    88 none    grey    black      NA  \n##  8 Kaminoan Taun We     213    NA none    grey    black      NA  \n##  9 Kaleesh  Grievous    216   159 none    brown,… green,…    NA  \n## 10 Wookiee  Tarfful     234   136 brown   brown   blue       NA  \n## 11 Pau'an   Tion Me…    206    80 none    grey    black      NA  \n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​hair_color,\n## #   ²​skin_color, ³​eye_color, ⁴​birth_year\ndf_st |> \n  filter(species != \"Human\")## # A tibble: 48 × 11\n##   species name  height  mass hair_color skin_co…¹ eye_c…² birth…³\n##   <chr>   <chr>  <int> <dbl> <chr>      <chr>     <chr>     <dbl>\n## 1 Droid   C-3PO    167    75 <NA>       gold      yellow      112\n## 2 Droid   R2-D2     96    32 <NA>       white, b… red          33\n## 3 Droid   R5-D4     97    32 <NA>       white, r… red          NA\n## # … with 45 more rows, 3 more variables: sex <chr>,\n## #   gender <chr>, homeworld <chr>, and abbreviated variable\n## #   names ¹​skin_color, ²​eye_color, ³​birth_year"},{"path":"filter.html","id":"filter-st-na","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.2.1 欠損値（NA）の扱い","text":"現実のデータでは，データが入手できない対象が発生することも多く，ある変数の値の中にデータがない変数の行（excel風にいうとセル）が発生する現実のデータでは，データが入手できない対象が発生することも多く，ある変数の値の中にデータがない変数の行（excel風にいうとセル）が発生するRではデータのない部分，いわゆる欠損値はNAで表されるRではデータのない部分，いわゆる欠損値はNAで表される例：種がNAのケースを選ぶ\nNAかどうかを判定する論理式はis.na()\n例：種がNAのケースを選ぶNAかどうかを判定する論理式はis.na()","code":"\ndf_st |> \n  filter(is.na(species))## # A tibble: 4 × 11\n##   species name       height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>   <chr>       <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 <NA>    Ric Olié      183    NA brown   fair    blue         NA\n## 2 <NA>    Quarsh Pa…    183    NA black   dark    brown        62\n## 3 <NA>    Sly Moore     178    48 none    pale    white        NA\n## 4 <NA>    Captain P…     NA    NA unknown unknown unknown      NA\n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​hair_color,\n## #   ²​skin_color, ³​eye_color, ⁴​birth_year"},{"path":"filter.html","id":"練習問題-6","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.2.2 [練習問題]","text":"df_stのデータから変数”hair_color”の値が”white”のケースを選ぼうdf_stのデータから変数”mass”の値が40未満のケースを選ぼう","code":""},{"path":"filter.html","id":"filter-multi","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.3 複数条件","text":"例：speciesがDroidまたはHumanのケースを選ぶ\n「|」は「または」を表す\n「|」は「または」を表すspeciesがDroidかつ身長が100未満のケースのみ選ぶ\n&は「かつ」を表す\n&は「かつ」を表す","code":"\ndf_st |> \n  filter(species == \"Droid\" | species == \"Human\")## # A tibble: 41 × 11\n##   species name       height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>   <chr>       <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 Human   Luke Skyw…    172    77 blond   fair    blue         19\n## 2 Droid   C-3PO         167    75 <NA>    gold    yellow      112\n## 3 Droid   R2-D2          96    32 <NA>    white,… red          33\n## # … with 38 more rows, 3 more variables: sex <chr>,\n## #   gender <chr>, homeworld <chr>, and abbreviated variable\n## #   names ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year\ndf_st |> \n  filter(species == \"Droid\" & height < 100)## # A tibble: 3 × 11\n##   species name   height  mass hair_color skin_c…¹ eye_c…² birth…³\n##   <chr>   <chr>   <int> <dbl> <chr>      <chr>    <chr>     <dbl>\n## 1 Droid   R2-D2      96    32 <NA>       white, … red          33\n## 2 Droid   R5-D4      97    32 <NA>       white, … red          NA\n## 3 Droid   R4-P17     96    NA none       silver,… red, b…      NA\n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​skin_color,\n## #   ²​eye_color, ³​birth_year"},{"path":"filter.html","id":"filter-multi-eff","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.3.1 【効率化】","text":"選びたいものが多くなると，書くのが大変。“species ==”とかをいちいち書きたくない例: speciesで”Aleena”または “Dug”または “Yoda’s species”を選びたいとき効率化するには%%で解決\nc()内の候補を「または」で指定できる\nc()内の候補を「または」で指定できる例: 種で”Droid”, “Human”以外を選びたいとき\nこの場合，&が必須\nこの場合，&が必須%%を使えば変数名の前に!をつけるだけでよい","code":"\ndf_st |> \n  filter(species == \"Aleena\" | species == \"Dug\" | \n         species == \"Yoda's species\")## # A tibble: 3 × 11\n##   species      name  height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>        <chr>  <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 Yoda's spec… Yoda      66    17 white   green   brown       896\n## 2 Dug          Sebu…    112    40 none    grey, … orange       NA\n## 3 Aleena       Ratt…     79    15 none    grey, … unknown      NA\n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​hair_color,\n## #   ²​skin_color, ³​eye_color, ⁴​birth_year\ndf_st |> \n  filter(species %in% c(\"Aleena\", \"Dug\", \"Yoda's species\"))## # A tibble: 3 × 11\n##   species      name  height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>        <chr>  <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 Yoda's spec… Yoda      66    17 white   green   brown       896\n## 2 Dug          Sebu…    112    40 none    grey, … orange       NA\n## 3 Aleena       Ratt…     79    15 none    grey, … unknown      NA\n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​hair_color,\n## #   ²​skin_color, ³​eye_color, ⁴​birth_year\ndf_st |> \n  filter(species != \"Droid\" & species != \"Human\")## # A tibble: 42 × 11\n##   species name       height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>   <chr>       <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 Wookiee Chewbacca     228   112 brown   unknown blue        200\n## 2 Rodian  Greedo        173    74 <NA>    green   black        44\n## 3 Hutt    Jabba Des…    175  1358 <NA>    green-… orange      600\n## # … with 39 more rows, 3 more variables: sex <chr>,\n## #   gender <chr>, homeworld <chr>, and abbreviated variable\n## #   names ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year\ndf_st |> \n  filter(!species %in% c(\"Droid\", \"Human\"))## # A tibble: 46 × 11\n##   species name       height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>   <chr>       <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 Wookiee Chewbacca     228   112 brown   unknown blue        200\n## 2 Rodian  Greedo        173    74 <NA>    green   black        44\n## 3 Hutt    Jabba Des…    175  1358 <NA>    green-… orange      600\n## # … with 43 more rows, 3 more variables: sex <chr>,\n## #   gender <chr>, homeworld <chr>, and abbreviated variable\n## #   names ¹​hair_color, ²​skin_color, ³​eye_color, ⁴​birth_year"},{"path":"filter.html","id":"練習問題-7","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.3.2 [練習問題]","text":"df_stのデータから変数”species”の値が”Human”かつ変数”sex”の値が”female”のケースを選ぼうdf_stのデータから変数”eye_color”の値が”blue-gray”または”dark”または”gold”または”pink”のケースを効率化した方法で選ぼう","code":""},{"path":"filter.html","id":"filter-kw","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.4 キーワードによる検索","text":"手元で特定の名前の行のデータを見たいときに便利手元で特定の名前の行のデータを見たいときに便利キーワード検索には，正規表現の結果をTRUE FALSEで返す関数stringr::str_detect()を使うキーワード検索には，正規表現の結果をTRUE FALSEで返す関数stringr::str_detect()を使う例：変数nameに”Luke”を含む行を見たい例：変数nameに”Luke”を含む行を見たい例：変数nameが”R”で始まる行を見たい\n正規表現で「^」はその次の文字から始まる文字列という意味\n正規表現で「^」はその次の文字から始まる文字列という意味例：変数nameが”Y”または”L”で始まる行を見たい\n正規表現で「または」は\" \"の中に入れる\n正規表現で「または」は\" \"の中に入れる","code":"\ndf_st |>\n  filter(str_detect(name, \"Luke\"))## # A tibble: 1 × 11\n##   species name       height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>   <chr>       <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 Human   Luke Skyw…    172    77 blond   fair    blue         19\n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​hair_color,\n## #   ²​skin_color, ³​eye_color, ⁴​birth_year\ndf_st |>\n  filter(str_detect(name, \"^R\"))## # A tibble: 9 × 11\n##   species name       height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>   <chr>       <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 Droid   R2-D2          96    32 <NA>    white,… red          33\n## 2 Droid   R5-D4          97    32 <NA>    white,… red          NA\n## 3 Gungan  Roos Tarp…    224    82 none    grey    orange       NA\n## 4 Gungan  Rugor Nass    206    NA none    green   orange       NA\n## 5 <NA>    Ric Olié      183    NA brown   fair    blue         NA\n## 6 Aleena  Ratts Tye…     79    15 none    grey, … unknown      NA\n## 7 Droid   R4-P17         96    NA none    silver… red, b…      NA\n## 8 Human   Raymus An…    188    79 brown   light   brown        NA\n## 9 Human   Rey            NA    NA brown   light   hazel        NA\n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​hair_color,\n## #   ²​skin_color, ³​eye_color, ⁴​birth_year\ndf_st |>\n  filter(str_detect(name, \"^Y|^L\"))## # A tibble: 8 × 11\n##   species      name  height  mass hair_…¹ skin_…² eye_c…³ birth…⁴\n##   <chr>        <chr>  <int> <dbl> <chr>   <chr>   <chr>     <dbl>\n## 1 Human        Luke…    172  77   blond   fair    blue         19\n## 2 Human        Leia…    150  49   brown   light   brown        19\n## 3 Yoda's spec… Yoda      66  17   white   green   brown       896\n## 4 Human        Land…    177  79   black   dark    brown        31\n## 5 Human        Lobot    175  79   none    light   blue         37\n## 6 Quermian     Yara…    264  NA   none    white   yellow       NA\n## 7 Mirialan     Lumi…    170  56.2 black   yellow  blue         58\n## 8 Kaminoan     Lama…    229  88   none    grey    black        NA\n## # … with 3 more variables: sex <chr>, gender <chr>,\n## #   homeworld <chr>, and abbreviated variable names ¹​hair_color,\n## #   ²​skin_color, ³​eye_color, ⁴​birth_year"},{"path":"filter.html","id":"練習問題-8","chapter":"4 行（ケース）を選ぶ：filter","heading":"4.4.1 [練習問題]","text":"df_stのデータから変数”name”の値が数字で終わるケースを選ぼう（ヒント6）　","code":""},{"path":"mutate.html","id":"mutate","chapter":"5 新しい変数（列）の作成：mutate","heading":"5 新しい変数（列）の作成：mutate","text":"本章のポイント\nパッケージdplyrの関数mutate()\n後の分析に使うために新しい変数の列を作成する\n効率化のために非常に重要なacross()について学ぶ\nパッケージdplyrの関数mutate()後の分析に使うために新しい変数の列を作成する効率化のために非常に重要なacross()について学ぶ","code":""},{"path":"mutate.html","id":"mu-read","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.1 使用データ","text":"psychToolsパッケージに入っている国際パーソナリティ項目プールからの2800名分のデータ\n質問項目が25問あり，5つの構成概念（ここでは因子という）に対応する項目への回答を足し合わせたスコアを計算する\n性，教育歴，年齢の変数もあり\n質問項目が25問あり，5つの構成概念（ここでは因子という）に対応する項目への回答を足し合わせたスコアを計算する性，教育歴，年齢の変数もあり項目に対し想定される因子（因子名の頭文字が変数名と対応）\nAgree A1からA5\nConscientious　 C1からC5\nExtraversion E1からE5\nNeuroticism　 N1からN5\nOpenness　　 O1からO5\nAgree A1からA5Conscientious　 C1からC5Extraversion E1からE5Neuroticism　 N1からN5Openness　　 O1からO5回答選択肢\n1 Inaccurate まったくあてはまらない\n2 Moderately Inaccurate あてはまらない\n3 Slightly Inaccurate ややあてはまらない\n4 Slightly Accurate ややあてはまる\n5 Moderately Accurate あてはまる\n6 Accurate 非常にあてはまる\n1 Inaccurate まったくあてはまらない2 Moderately Inaccurate あてはまらない3 Slightly Inaccurate ややあてはまらない4 Slightly Accurate ややあてはまる5 Moderately Accurate あてはまる6 Accurate 非常にあてはまる","code":"\n# パッケージが入ってなければ下記の#を外して実行\n# install.packages(\"psychTools\")\n\n# まだtidyverseパッケージを読み込んでない場合は以下の#を外して実行\n# library(tidyverse)\n\ndf_bfi <- \n  psychTools::bfi |> \n  as_tibble()         # 表示に便利なtibble形式に"},{"path":"mutate.html","id":"mu-standard","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.2 基本","text":"データフレームに新しい列を計算して追加するまたは置き換える関数mutate()の中に新しく作成する変数名を入れ，=でつないで計算式を入れるここでは，まず変数A1の平均値（全ケース同じ値が入る）を計算し，個々のケースの値の差分を新しく列として追加する例を示すmean_a1列にはA1の平均値がすべて同じ値で入る（平均値だけの計算がしたければ6章を参照）dif_a1_mean列は，A1列からmean_a1列を引いた値が入る","code":"\ndf_bfi |> \n  select(A1) |>                      # A1のみを残す\n  mutate(\n    mean_a1 = mean(A1, na.rm = TRUE), # A1の平均値を作成（NAは除外）\n    dif_a1_mean = A1 - mean_a1)       # 各個体のA1と平均値の差分を計算## # A tibble: 2,800 × 3\n##      A1 mean_a1 dif_a1_mean\n##   <int>   <dbl>       <dbl>\n## 1     2    2.41      -0.413\n## 2     2    2.41      -0.413\n## 3     5    2.41       2.59 \n## # … with 2,797 more rows"},{"path":"mutate.html","id":"新しく作成した列の位置を指定する","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.2.1 新しく作成した列の位置を指定する","text":".= 1と引数を指定することで,先頭に持ってこれる\n.=とあわせて，列名を指定することで出現場所を指定できる\n.=とあわせて，列名を指定することで出現場所を指定できる引数.keep = \"used\"で作成に関係した列だけにする","code":"\ndf_bfi |> \n  mutate(\n    mean_a1 = mean(A1, na.rm = TRUE), # A1の平均値を作成（NAは除外）\n    dif_a1_mean = A1 - mean_a1,\n    .before = 1) ## # A tibble: 2,800 × 30\n##   mean_a1 dif_a…¹    A1    A2    A3    A4    A5    C1    C2    C3\n##     <dbl>   <dbl> <int> <int> <int> <int> <int> <int> <int> <int>\n## 1    2.41  -0.413     2     4     3     4     4     2     3     3\n## 2    2.41  -0.413     2     4     5     2     5     5     4     4\n## 3    2.41   2.59      5     4     5     4     4     4     5     4\n## # … with 2,797 more rows, 20 more variables: C4 <int>, C5 <int>,\n## #   E1 <int>, E2 <int>, E3 <int>, E4 <int>, E5 <int>, N1 <int>,\n## #   N2 <int>, N3 <int>, N4 <int>, N5 <int>, O1 <int>, O2 <int>,\n## #   O3 <int>, O4 <int>, O5 <int>, gender <int>, education <int>,\n## #   age <int>, and abbreviated variable name ¹​dif_a1_mean\ndf_bfi |> \n  mutate(\n    mean_a1 = mean(A1, na.rm = TRUE), # A1の平均値を作成（NAは除外）\n    dif_a1_mean = A1 - mean_a1,\n    .keep = \"used\") ## # A tibble: 2,800 × 3\n##      A1 mean_a1 dif_a1_mean\n##   <int>   <dbl>       <dbl>\n## 1     2    2.41      -0.413\n## 2     2    2.41      -0.413\n## 3     5    2.41       2.59 \n## # … with 2,797 more rows"},{"path":"mutate.html","id":"練習問題-9","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.2.2 [練習問題]","text":"df_bfiデータの変数A1とA2だけを選んで，A2からA1を引いた新しい変数”A2_1”を作成しよう","code":""},{"path":"mutate.html","id":"mu-kata","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.3 変数の型の変換","text":"1.6.1.1で触れたように，変数には型の情報が伴い，統計解析やデータ加工の際に適切な型を求められることがあるため理解が必要\n小数も扱う数値（double-precision） <dbl>\n整数 <int>\n文字 <chr>\n因子 <fct>\n小数も扱う数値（double-precision） <dbl>整数 <int>文字 <chr>因子 <fct>変数の型の確認は色々方法があるが，tibble形式のデータフレームならselect()でOK\n以下の出力の変数名の下にその変数の型が表示される\n以下の出力の変数名の下にその変数の型が表示されるtibble形式でない普通のデータフレームでも，最後にglimpse()で出力することで型を確認可能glimpse()の結果はデータフレームの表示が行列入れ替わっており，変数の情報が行ごとに出力されるgender, education列が <int> になっているので整数型になっている","code":"\ndf_bfi |> \n  select(gender, education)## # A tibble: 2,800 × 2\n##   gender education\n##    <int>     <int>\n## 1      1        NA\n## 2      2        NA\n## 3      2        NA\n## # … with 2,797 more rows\ndf_bfi |>\n  select(gender, education) |>\n  glimpse()## Rows: 2,800\n## Columns: 2\n## $ gender    <int> 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, …\n## $ education <int> NA, NA, NA, NA, NA, 3, NA, 2, 1, NA, 1, NA, N…"},{"path":"mutate.html","id":"mu-kata-trans","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.3.1 型の変換","text":"ここでは，2つの数値型変数gender, educationを因子型に変換する例を示すそれぞれfactor()で因子型に変換gender, education列が <fct> になっているので整数型になっている","code":"\ndf_bfi |>\n  select(gender, education) |> \n  mutate(gender = factor(gender),\n         education = factor(education))## # A tibble: 2,800 × 2\n##   gender education\n##   <fct>  <fct>    \n## 1 1      <NA>     \n## 2 2      <NA>     \n## 3 2      <NA>     \n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-kata-across","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.3.2 【効率化】複数の変数に対し一度の指定で実行","text":"変換したい変数が大量にあるときは上記の方法では大変across()を使うと，指定した変数に対して同じ内容の処理なら 1回 ですむようになる7across()の第一引数に変数ベクトルを入れ，次に適用する関数（ここではfactor()）を入れるこの場合，元の変数が上書きされるので，新しい列はできていない","code":"\ndf_bfi |>\n  mutate(across(c(gender, education),\n                factor)) |> \n  select(gender, education)   # 結果表示のため冗長だが変わった変数だけselect## # A tibble: 2,800 × 2\n##   gender education\n##   <fct>  <fct>    \n## 1 1      <NA>     \n## 2 2      <NA>     \n## 3 2      <NA>     \n## # … with 2,797 more rows"},{"path":"mutate.html","id":"練習問題-10","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.3.3 [練習問題]","text":"df_bfiデータの変数A1, A2, A3, A4, A5を因子型に変換してデータフレームを表示させよう","code":""},{"path":"mutate.html","id":"mu-across","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.4 across()の特徴","text":"変数の指定に2.3で解説したヘルパー関数が使える同じく2.2.3で解説した文字型の変数名も指定に使える","code":"\ndf_bfi |>\n  mutate(across(starts_with(\"n\"),\n                factor)) |> \n  select(starts_with(\"n\"))   # 結果表示のため## # A tibble: 2,800 × 5\n##   N1    N2    N3    N4    N5   \n##   <fct> <fct> <fct> <fct> <fct>\n## 1 3     4     2     2     3    \n## 2 3     3     3     5     5    \n## 3 4     5     4     2     3    \n## # … with 2,797 more rows\nvars <- c(\"N1\", \"N2\", \"N3\", \"N4\", \"N5\")\n\ndf_bfi |>\n  mutate(across(all_of(vars),\n                factor)) |> \n  select(starts_with(\"n\"))   # 結果表示のため## # A tibble: 2,800 × 5\n##   N1    N2    N3    N4    N5   \n##   <fct> <fct> <fct> <fct> <fct>\n## 1 3     4     2     2     3    \n## 2 3     3     3     5     5    \n## 3 4     5     4     2     3    \n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-across-list","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.4.1 【重要知識】新しい変数名にして追加","text":"ここはこの後色々なところで出てくる方法のため理解しておきたいここはこの後色々なところで出てくる方法のため理解しておきたい適用する関数をリストにする（list()に入れる）ことで，変数名を変更して追加できる適用する関数をリストにする（list()に入れる）ことで，変数名を変更して追加できるlist()に入れるときはこれまでと異なる書き方が必要になるlist()に入れるときはこれまでと異なる書き方が必要になるpurrr 1.0.0では，従来の~と.xを使った記法から，無名関数の\\(x) とxを使う書き方に移行した（参考：purrr 1.0.0 Docmentation）(詳しくは1.4.2.2参照)\n関数名の前に\\(x)が必要。x部分は他の文字でもよいし，引数がいくつも必要なら，複数の文字を入れられる\nlist内の「関数()」内にx（上記同様，\\()内と一致していれば他の文字でもよい）が必要。このxにacross()の第一引数に指定した変数が入っていくという意味\npurrr 1.0.0では，従来の~と.xを使った記法から，無名関数の\\(x) とxを使う書き方に移行した（参考：purrr 1.0.0 Docmentation）(詳しくは1.4.2.2参照)関数名の前に\\(x)が必要。x部分は他の文字でもよいし，引数がいくつも必要なら，複数の文字を入れられるlist内の「関数()」内にx（上記同様，\\()内と一致していれば他の文字でもよい）が必要。このxにacross()の第一引数に指定した変数が入っていくという意味（参考）purrr 1.0.0より前のバージョンでの説明\n関数名の前に~（チルダ）が必要（3.2.1参照）\nlist内の「関数()」内に.xが必要。この.xにacross()の第一引数に指定した変数が入っていくという意味\n（参考）purrr 1.0.0より前のバージョンでの説明関数名の前に~（チルダ）が必要（3.2.1参照）list内の「関数()」内に.xが必要。この.xにacross()の第一引数に指定した変数が入っていくという意味例：genderとeducationの型を因子型に変換し，変換前後で変わっているかどうか確認例：genderとeducationの型を因子型に変換し，変換前後で変わっているかどうか確認因子型に変換した変数の末尾に_fがつくselectでmatches()を使っているのは，新しく接尾辞が増えた変数を追加しているので入力を少なく効率的に表示させるため","code":"\ndf_bfi |>\n  mutate(across(c(gender, education),\n                list(f = \\(x) factor(x)))) |> \n  select(matches(\"gender|education\"))   ## # A tibble: 2,800 × 4\n##   gender education gender_f education_f\n##    <int>     <int> <fct>    <fct>      \n## 1      1        NA 1        <NA>       \n## 2      2        NA 2        <NA>       \n## 3      2        NA 2        <NA>       \n## # … with 2,797 more rows\n# purrr 1.0.0より前のバージョンでの書き方\n# df_bfi |>\n#   mutate(across(c(gender, education),\n#                 list(f = ~factor(.x)))) |> \n#   select(matches(\"gender|education\"))   "},{"path":"mutate.html","id":"練習問題-11","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.4.2 [練習問題]","text":"df_bfiデータの変数N1, N2, N3, N4, N5だけをすべて因子型に変換して変数名末尾に”_fct”を付けた変数を追加し，ヘルパー関数を使って選んで示そう","code":""},{"path":"mutate.html","id":"mu-total","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.5 合計点の作成","text":"変数の四則演算の式を入れれば合計得点として計算された列をデータフレームに追加できる別解として，変数の逆転項目を反映させた後に， 5.9 で異なるやり方で合計した例を解説する\n項目数が多い場合などはこちらの方が効率化できる場合も\n項目数が多い場合などはこちらの方が効率化できる場合も","code":"\ndf_bfi_n <- \n  df_bfi |>\n  select(N1:N5) |>                       \n  mutate(neuroticism = N1 + N2 + N3 + N4 + N5)\n  \ndf_bfi_n## # A tibble: 2,800 × 6\n##      N1    N2    N3    N4    N5 neuroticism\n##   <int> <int> <int> <int> <int>       <int>\n## 1     3     4     2     2     3          14\n## 2     3     3     3     5     5          19\n## 3     4     5     4     2     3          18\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-total-na","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.5.1 足し上げる変数に欠損値があるとどうなるか","text":"欠損値については4.2.1参照合計得点の計算の場合，対象となる変数の内1つでもNAがあれば合計点もNAとなる","code":"\ndf_bfi_n |> \n  filter(is.na(neuroticism))     # neuroticismがNAなケースに限定## # A tibble: 106 × 6\n##      N1    N2    N3    N4    N5 neuroticism\n##   <int> <int> <int> <int> <int>       <int>\n## 1     4     5     3     2    NA          NA\n## 2    NA     2     1     2     2          NA\n## 3     1     2     1     2    NA          NA\n## # … with 103 more rows"},{"path":"mutate.html","id":"変数の値を数値から文字列に変える","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.6 変数の値を数値から文字列に変える","text":"一度因子型に変換してからforcatsパッケージのfct_recode()関数を使うと簡単\nfct_recode()の第一引数に変換元の変数を入れそのあとに置き換えルールを new = oldで入れていく\nfct_recode()の第一引数に変換元の変数を入れそのあとに置き換えルールを new = oldで入れていく例：genderの値1,2をそれぞれmale, femaleという文字に置き換えるちゃんと変換の対応がついているかどうかをdplyrパッケージのcount()関数で確認\n適切に変換されていなければ，1 = male, 2 = female以外の組み合わせも発生するため\ncount()の強みは，出力がデータフレームで出てくる点なので，結果が扱いやすい\n適切に変換されていなければ，1 = male, 2 = female以外の組み合わせも発生するためcount()の強みは，出力がデータフレームで出てくる点なので，結果が扱いやすい","code":"\ndf_bfi |>\n  mutate(gender = factor(gender),\n         gender_c = fct_recode(gender, \n                               male   = \"1\",\n                               female = \"2\")) |> \n  count(gender, gender_c)## # A tibble: 2 × 3\n##   gender gender_c     n\n##   <fct>  <fct>    <int>\n## 1 1      male       919\n## 2 2      female    1881"},{"path":"mutate.html","id":"練習問題-12","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.6.1 [練習問題]","text":"df_bfiデータの変数educationを数値の値1～5を，それぞれ対応する”HS”, “finished HS”, “college”, “college graduate”, “graduate degree”に変換して，ちゃんと変換されているかどうかcountで確認しよう","code":""},{"path":"mutate.html","id":"mu-seq","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.7 連番からIDの作成","text":"dplyr::row_number()で行番号からIDを作成","code":"\ndf_bfi_n |> \n  mutate(id = row_number())## # A tibble: 2,800 × 7\n##      N1    N2    N3    N4    N5 neuroticism    id\n##   <int> <int> <int> <int> <int>       <int> <int>\n## 1     3     4     2     2     3          14     1\n## 2     3     3     3     5     5          19     2\n## 3     4     5     4     2     3          18     3\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-seq-other","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.7.1 【別解】行の名前を直接変数化","text":"実はmutate()を使わなくてもできて，データの最初に持ってこれる便利関数があるtibble::rowid_to_column()\nvar =で連番として追加する変数名を指定\nvar =で連番として追加する変数名を指定","code":"\ndf_bfi_n |> \n  rowid_to_column(var = \"id\")## # A tibble: 2,800 × 7\n##      id    N1    N2    N3    N4    N5 neuroticism\n##   <int> <int> <int> <int> <int> <int>       <int>\n## 1     1     3     4     2     2     3          14\n## 2     2     3     3     3     5     5          19\n## 3     3     4     5     4     2     3          18\n## # … with 2,797 more rows\n# この先使わないのでデータフレーム削除\nrm(df_bfi_n)"},{"path":"mutate.html","id":"mu-rev","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8 逆転項目を作る","text":"心理尺度などの場合，質問内容に対する回答選択肢の意味が，項目間で逆になるように設定されることがあり，合計点などを作る際に尺度の意味を適切に表すように，取りうる数値の範囲内で値を入れ替える作業が発生することがある\nたとえば，感情の状態を項目を合計してたずねる尺度で，「いつも楽しい」という項目と，「いつも悲しい」という聞き方をしていたら，それぞれの回答を得点化したときに意味が反対になるため，同じ方向になるようにする必要がある\n例：「1. まったくあてはまらない ←→ 6. 非常にあてはまる」のルールを「いつも悲しい」項目に適用し，1の回答を6に置き換えれば，「いつも楽しい」とポジティブな方向で点数の意味がそろう\nたとえば，感情の状態を項目を合計してたずねる尺度で，「いつも楽しい」という項目と，「いつも悲しい」という聞き方をしていたら，それぞれの回答を得点化したときに意味が反対になるため，同じ方向になるようにする必要がある例：「1. まったくあてはまらない ←→ 6. 非常にあてはまる」のルールを「いつも悲しい」項目に適用し，1の回答を6に置き換えれば，「いつも楽しい」とポジティブな方向で点数の意味がそろう","code":""},{"path":"mutate.html","id":"mu-rev-recode","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.1 逆転：recode","text":"","code":""},{"path":"mutate.html","id":"mu-rev-check","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.1.1 逆転項目の確認","text":"bfiデータの場合，どの項目を逆転する必要があるかを示す情報（\n「-変数名」で表現）がパッケージに含まれている\npsychTools::bfi.keys で確認可能\npsychTools::bfi.keys で確認可能したがって，“-A1”, “-C4”, “-C5”, “-E1”, “-E2”, “-O2”, “-O5”が対象","code":""},{"path":"mutate.html","id":"mu-rev-recode1","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.1.2 変数1つを逆転","text":"dplyr::recode()を使用対象の変数をrecode()の第一引数に，入れ替えたい値をold = newで並べていく\nこの等式の順番が他(mutateなど)と逆になるため，recode()は将来引退する可能性ありとされている\nまた，下記のように考慮すべき点があるから，後述の【別解】5.8.2, 5.8.3を使う方がよいかもしれない\nこの等式の順番が他(mutateなど)と逆になるため，recode()は将来引退する可能性ありとされているまた，下記のように考慮すべき点があるから，後述の【別解】5.8.2, 5.8.3を使う方がよいかもしれない値の指定で考慮すべき点\noldの数値は` `で囲む必要がある\nnewの数値にLがつくのは，型を整数のままにするため。Lなしでも実行できるが，型がdblになる\noldの数値は` `で囲む必要があるnewの数値にLがつくのは，型を整数のままにするため。Lなしでも実行できるが，型がdblになる","code":"\ndf_bfi |> \n  mutate(A1_r = recode(A1, `1` = 6L, `2` = 5L, `3` = 4L,      \n                           `4` = 3L, `5` = 2L, `6` = 1L)) |> \n  select(A1, A1_r)## # A tibble: 2,800 × 2\n##      A1  A1_r\n##   <int> <int>\n## 1     2     5\n## 2     2     5\n## 3     5     2\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-recode2","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.1.3 変数2つ以上を逆転","text":"A1と同様に同じ形をくり返し変数名だけ変えていけばできるが，コードが長くなりミスも生じやすくなる","code":"\ndf_bfi |> \n  mutate(A1_r = recode(A1, `1` = 6L, `2` = 5L, `3` = 4L, \n                           `4` = 3L, `5` = 2L, `6` = 1L),\n         C4_r = recode(C4, `1` = 6L, `2` = 5L, `3` = 4L, \n                           `4` = 3L, `5` = 2L, `6` = 1L)) |> \n  select(A1, A1_r, C4, C4_r)## # A tibble: 2,800 × 4\n##      A1  A1_r    C4  C4_r\n##   <int> <int> <int> <int>\n## 1     2     5     4     3\n## 2     2     5     3     4\n## 3     5     2     2     5\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-recode2ef","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.1.4 【効率化】 変数2つ以上を逆転","text":"5.4.1 で解説したlistに関数を入れる方法\nこれで対象となるacross()内変数に_rの接尾辞が付いた逆転項目が追加される\nこれで対象となるacross()内変数に_rの接尾辞が付いた逆転項目が追加される","code":"\ndf_bfi |> \n  mutate(across(c(A1, C4),\n                list(r = \\(x) recode(x, `1` = 6L, `2` = 5L, `3` = 4L, \n                                     `4` = 3L, `5` = 2L, `6` = 1L)))) |> \n  select(A1, A1_r, C4, C4_r)## # A tibble: 2,800 × 4\n##      A1  A1_r    C4  C4_r\n##   <int> <int> <int> <int>\n## 1     2     5     4     3\n## 2     2     5     3     4\n## 3     5     2     2     5\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-rule1","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.2 【別解】逆転（公式）","text":"項目を反転する公式が「(max + min) - 回答値」であることを利用\npsych::reverse.code()のhelp参照\n例：最小値1,最大値4の場合，max + min = 5となり，回答値が2の場合，5 - 2 = 3となり反転された結果となる\npsych::reverse.code()のhelp参照例：最小値1,最大値4の場合，max + min = 5となり，回答値が2の場合，5 - 2 = 3となり反転された結果となる","code":"\nmin <- 1\nmax <- 6\n\ndf_bfi |> \n  mutate(A1_r = max + min - A1,\n         C4_r = max + min - C4) |> \n  select(A1, A1_r, C4, C4_r)## # A tibble: 2,800 × 4\n##      A1  A1_r    C4  C4_r\n##   <int> <dbl> <int> <dbl>\n## 1     2     5     4     3\n## 2     2     5     3     4\n## 3     5     2     2     5\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-rule2","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.2.1 【効率化】 変数2つ以上を逆転","text":"「~」の後に計算式がきても動くここでは，max + min - .x の.xにacross()内に置かれた変数が入っていく","code":"\ndf_bfi |> \n  mutate(across(c(A1,C4),\n                list(r = \\(x) max + min - x))) |> \n  select(A1, A1_r, C4, C4_r)## # A tibble: 2,800 × 4\n##      A1  A1_r    C4  C4_r\n##   <int> <dbl> <int> <dbl>\n## 1     2     5     4     3\n## 2     2     5     3     4\n## 3     5     2     2     5\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-casewhen1","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.3 【別解】逆転（case_when）","text":"条件式の==を使って値を変換することもできる。こちらだと条件式の内容や複数の変数の組み合わせなど幅広い応用が可能に","code":"\ndf_bfi |> \n  mutate(A1_r = case_when(A1 == 1 ~ 6L,\n                          A1 == 2 ~ 5L,\n                          A1 == 3 ~ 4L,\n                          A1 == 4 ~ 3L,\n                          A1 == 5 ~ 2L,\n                          A1 == 6 ~ 1L)) |> \n  select(A1, A1_r)## # A tibble: 2,800 × 2\n##      A1  A1_r\n##   <int> <int>\n## 1     2     5\n## 2     2     5\n## 3     5     2\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-casewhen2","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.3.1 【効率化】 変数2つ以上を逆転","text":"","code":"\ndf_bfi |> \n  mutate(across(c(A1,C4),\n                list(r = \\(x) case_when(x == 1 ~ 6L,\n                                        x == 2 ~ 5L,\n                                        x == 3 ~ 4L,\n                                        x == 4 ~ 3L,\n                                        x == 5 ~ 2L,\n                                        x == 6 ~ 1L)))\n  ) |> \n  select(A1, A1_r, C4, C4_r)## # A tibble: 2,800 × 4\n##      A1  A1_r    C4  C4_r\n##   <int> <int> <int> <int>\n## 1     2     5     4     3\n## 2     2     5     3     4\n## 3     5     2     2     5\n## # … with 2,797 more rows"},{"path":"mutate.html","id":"練習問題-13","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.8.4 [練習問題]","text":"df_bfiデータですべての逆転項目を逆転してdf_bfiに格納しよう\nこれ以降で使用するため，正解コードを非表示にしてここで実行のみしておく\n正解はmutate.Rmdファイルの該当部分参照\nこれ以降で使用するため，正解コードを非表示にしてここで実行のみしておく正解はmutate.Rmdファイルの該当部分参照","code":""},{"path":"mutate.html","id":"mu-total-ef","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.9 【別解】合計点の作成","text":"5.5の別解として，ここですべての合計点を作成するbase::rowSums()\nデータフレームで行の単位で総計するので，行（ケース）ごとに合計点を作成できる\nデータフレームで行の単位で総計するので，行（ケース）ごとに合計点を作成できるまず総計の対象となる変数名を2.2.3で解説したように文字ベクトルのオブジェクトに格納して定義していくrowSums()の中でacross()が使えるので，あとは定義した項目のオブジェクトを指定していくだけ","code":"\n# 合計する項目の定義\n\nAg <- \ndf_bfi |> \n  select(A1_r, A2:A5) |> \n  names()\n\nCo <- \ndf_bfi |> \n  select(C1:C3, C4_r, C5_r) |> \n  names()\n\nEx <- \n  df_bfi |> \n  select(E1_r, E2_r, E3:E5) |> \n  names()\n\nNe <- \ndf_bfi |> \n  select(N1:N5) |> \n  names()\n\nOp <- \ndf_bfi |> \n  select(O1, O2_r, O3, O4, O5_r) |> \n  names()\n\n\ndf_bfi <- \n  df_bfi |> \n  mutate(\n    Agree         = rowSums(across(all_of(Ag))),\n    Conscientious = rowSums(across(all_of(Co))),\n    Extraversion  = rowSums(across(all_of(Ex))),\n    Neuroticism   = rowSums(across(all_of(Ne))),\n    Openness      = rowSums(across(all_of(Op)))\n    )"},{"path":"mutate.html","id":"確認","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.9.1 【確認】","text":"変数の中にNAが入る場合は合計もNAになる。rowSums(across(all_of(Op)), na.rm = TRUE)と引数を追加すれば，NAを無視して合計できるrowSums()をbase::rowMeans()に変えれば平均値も計算できる","code":"\ndf_bfi |> select(all_of(Ag), Agree)## # A tibble: 2,800 × 6\n##    A1_r    A2    A3    A4    A5 Agree\n##   <dbl> <int> <int> <int> <int> <dbl>\n## 1     5     4     3     4     4    20\n## 2     5     4     5     2     5    21\n## 3     2     4     5     4     4    19\n## # … with 2,797 more rows\ndf_bfi |> \n  select(all_of(Ex), Extraversion) |> \n  filter(is.na(Extraversion))## # A tibble: 87 × 6\n##    E1_r  E2_r    E3    E4    E5 Extraversion\n##   <dbl> <dbl> <int> <int> <int>        <dbl>\n## 1     2     4    NA     4     3           NA\n## 2     6     6     4     4    NA           NA\n## 3     2    NA     3     2     3           NA\n## # … with 84 more rows"},{"path":"mutate.html","id":"連続変数をカテゴリに区分する","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.10 連続変数をカテゴリに区分する","text":"","code":""},{"path":"mutate.html","id":"分布の把握","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.10.1 分布の把握","text":"変数ageのヒストグラムを描き，分布を確認するグラフ作成パッケージggplot2でどんなグラフが作れるかは著者作成の辞書参照\nggplot2の辞書\nggplot2の辞書さっと中央値だけ見たいのであれば，従来のRの書き方が早い\n役に立つ場面が多いので，慣れたら従来の書き方を学んでおくとよい\n「 データフレーム$変数名」と指定することで変数（実際はベクトルになる）として扱える\n役に立つ場面が多いので，慣れたら従来の書き方を学んでおくとよい「 データフレーム$変数名」と指定することで変数（実際はベクトルになる）として扱える","code":"\nggplot(df_bfi) +           # ここにデータフレーム\n  geom_histogram(aes(age)) # aes()の中に対象変数\n# 中央値\nmedian(df_bfi$age)## [1] 26\n# モダンな方法だと少し長くなる\n# df_bfi |> \n#   summarise(median(age))"},{"path":"mutate.html","id":"数値変数の値で2区分のカテゴリ変数を作る","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.10.2 数値変数の値で2区分のカテゴリ変数を作る","text":"dplyr::if_else()で条件式（TRUEまたはFALSEを返すもの）によって値を2区分する構造：if_else(条件式, TRUEの場合の値, FALSEの場合の値)\nTRUEの場合の値, FALSEの場合の値はそれぞれ文字型を入れることもできる（例:“27歳以上”, “27歳未満”）\nTRUEの場合の値, FALSEの場合の値はそれぞれ文字型を入れることもできる（例:“27歳以上”, “27歳未満”）例：ageの値で27歳以上を1, それ以外を0とした2区分変数を作成する","code":"\nres_age2 <- \n  df_bfi |> \n  mutate(age2 = if_else(age >= 27, 1, 0)) |> \n  select(age, age2)\n\nres_age2 |> count(age2) ## # A tibble: 2 × 2\n##    age2     n\n##   <dbl> <int>\n## 1     0  1495\n## 2     1  1305"},{"path":"mutate.html","id":"確認-1","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.10.2.1 確認","text":"age >= 27が1，27未満が0にコーディングされているかfilter()で限定して確認念のため最初3行（1-3行目）と最後3行（n-2行目からn行目）も確認\ndplyr::slice()で1:3行目と最後の3行を表示させる\ndplyr::slice()で1:3行目と最後の3行を表示させる","code":"\nres_age2 |> \n  filter(age >= 20 & age <= 30) |> \n  count(age, age2) |> \n  print(n = 11)## # A tibble: 11 × 3\n##      age  age2     n\n##    <int> <dbl> <int>\n##  1    20     0   212\n##  2    21     0   144\n##  3    22     0   122\n##  4    23     0   138\n##  5    24     0   105\n##  6    25     0   113\n##  7    26     0    99\n##  8    27     1    97\n##  9    28     1    86\n## 10    29     1    78\n## 11    30     1    65\nres_age2 |> \n  count(age, age2) |> \n  slice(1:3, (n()-2):n())## # A tibble: 6 × 3\n##     age  age2     n\n##   <int> <dbl> <int>\n## 1     3     0     1\n## 2     9     0     1\n## 3    11     0     3\n## 4    72     1     1\n## 5    74     1     1\n## 6    86     1     1"},{"path":"mutate.html","id":"別解確認","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.10.2.2 【別解】確認","text":"長くなるがこちらの方が覚えやすいかも","code":"\nres_age2 |> \n  count(age, age2) |> \n  slice_head(n = 3)## # A tibble: 3 × 3\n##     age  age2     n\n##   <int> <dbl> <int>\n## 1     3     0     1\n## 2     9     0     1\n## 3    11     0     3\nres_age2 |> \n  count(age, age2) |> \n  slice_tail(n = 3)## # A tibble: 3 × 3\n##     age  age2     n\n##   <int> <dbl> <int>\n## 1    72     1     1\n## 2    74     1     1\n## 3    86     1     1\nrm(res_age2)"},{"path":"mutate.html","id":"数値変数の値で3区分以上のカテゴリ変数を作る","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.10.3 数値変数の値で3区分以上のカテゴリ変数を作る","text":"年齢層を10歳区切りでカテゴリ化","code":"\nres_age6 <- \n  df_bfi |> \n  mutate(age6 = case_when(\n    age < 20              ~ \"20歳未満\", \n    age >= 20  & age < 30 ~ \"20-29歳\", \n    age >= 30  & age < 40 ~ \"30-39歳\",\n    age >= 40  & age < 50 ~ \"40-49歳\",\n    age >= 50  & age < 60 ~ \"50-59歳\",\n    age >= 60             ~ \"60歳以上\"  \n  ))\n\n# 確認するには以下のコードの最初の2行だけでよいが，\n# 出力が長いためランダムに10件抽出しageの昇順にしてある\n\nres_age6 |> \n  count(age, age6) |> \n  slice_sample(n = 10) |> # ランダムに10件抽出\n  arrange(age)             # ageをキーに行を昇順にソート## # A tibble: 10 × 3\n##      age age6         n\n##    <int> <chr>    <int>\n##  1    16 20歳未満    61\n##  2    27 20-29歳     97\n##  3    33 30-39歳     50\n##  4    46 40-49歳     25\n##  5    50 50-59歳     34\n##  6    54 50-59歳     14\n##  7    58 50-59歳      7\n##  8    60 60歳以上     6\n##  9    62 60歳以上     4\n## 10    63 60歳以上     3\nrm(res_age6)"},{"path":"mutate.html","id":"練習問題-14","chapter":"5 新しい変数（列）の作成：mutate","heading":"5.10.4 [練習問題]","text":"df_bfiデータの年齢層を以下の基準でカテゴリ化した変数”age4”を作成しよう\n“10代”, “20_30代”, “40_50代”, “60代”, その他はNA\n“10代”, “20_30代”, “40_50代”, “60代”, その他はNA","code":""},{"path":"summarise.html","id":"summarise","chapter":"6 要約値を作る：summarise","heading":"6 要約値を作る：summarise","text":"本章のポイント\nパッケージdplyrの関数summarise()\n結果をデータフレームとして出力するため，扱いが便利\nデータを知るうえで要約作業は頻繁に行うことが想定される\n便利な要約パッケージが色々あるものの，summarise()は柔軟な出力が可能なので使いこなせると役に立つ\nパッケージdplyrの関数summarise()結果をデータフレームとして出力するため，扱いが便利データを知るうえで要約作業は頻繁に行うことが想定される便利な要約パッケージが色々あるものの，summarise()は柔軟な出力が可能なので使いこなせると役に立つ","code":""},{"path":"summarise.html","id":"su-st","chapter":"6 要約値を作る：summarise","heading":"6.1 基本","text":"summarise()の中に出力したい変数名を書き，=の後に計算する関数を入れる例：bill_length_mmの平均値を算出するデータは2.1で読み込んだdfを使用","code":"\n# まだtidyverseパッケージを読み込んでない場合は以下の#を外して実行\n# library(tidyverse)\n\ndf |> \n  summarise(blm_平均値 = mean(bill_length_mm, na.rm = TRUE))## # A tibble: 1 × 1\n##   blm_平均値\n##        <dbl>\n## 1       43.9"},{"path":"summarise.html","id":"su-st-multiple","chapter":"6 要約値を作る：summarise","heading":"6.2 複数の計算","text":"複数の変数について平均値と標準偏差（SD）と人数（n）を出したいときは，基本知識では全部書くので長くなる\nSDはsd()関数，nは変数内の欠損のない行以外の数の合計で算出\nsum(!.na(.x))は，NAのない行の数を総計するので，平均値やSDの計算に用いた人数を取得できる\nSDはsd()関数，nは変数内の欠損のない行以外の数の合計で算出sum(!.na(.x))は，NAのない行の数を総計するので，平均値やSDの計算に用いた人数を取得できる","code":"\ndf |> \n  summarise(blm_mean = mean(bill_length_mm, na.rm = TRUE),\n            bdm_mean = mean(bill_depth_mm, na.rm = TRUE),\n            blm_sd = sd(bill_length_mm, na.rm = TRUE),\n            bdm_sd = sd(bill_depth_mm, na.rm = TRUE),\n            blm_n  = sum(!is.na(bill_length_mm)),\n            bdm_n  = sum(!is.na(bill_depth_mm)))## # A tibble: 1 × 6\n##   blm_mean bdm_mean blm_sd bdm_sd blm_n bdm_n\n##      <dbl>    <dbl>  <dbl>  <dbl> <int> <int>\n## 1     43.9     17.2   5.46   1.97   342   342"},{"path":"summarise.html","id":"su-st-ef","chapter":"6 要約値を作る：summarise","heading":"6.2.1 【効率化】","text":"5.3.2で出てきたacross()がここでも有用across()の第一引数に指定したい変数名ベクトル，またはヘルパー関数を入れる実行したい関数を無名関数としてlist内に名前（これが接尾辞になる）をつけて列挙するacross()ではヘルパー関数が使えるlist()内に関数を並べている部分は，関数を名前付きリストにしているだけなので，外に出して１回オブジェクトとして指定すれば記述がすっきりするし，後の同じ作業で繰り返し使える","code":"\ndf |> \n  summarise(across(c(bill_length_mm, bill_depth_mm),\n                   list(mean = \\(x) mean(x, na.rm = TRUE),\n                          sd = \\(x)   sd(x, na.rm = TRUE),\n                           n = \\(x)  sum(!is.na(x)))))## # A tibble: 1 × 6\n##   bill_length_mm_mean bill_leng…¹ bill_…² bill_…³ bill_…⁴ bill_…⁵\n##                 <dbl>       <dbl>   <int>   <dbl>   <dbl>   <int>\n## 1                43.9        5.46     342    17.2    1.97     342\n## # … with abbreviated variable names ¹​bill_length_mm_sd,\n## #   ²​bill_length_mm_n, ³​bill_depth_mm_mean, ⁴​bill_depth_mm_sd,\n## #   ⁵​bill_depth_mm_n\n# purrr 1.0.0より前のバージョンでの書き方\n# df |> \n#   summarise(across(c(bill_length_mm, bill_depth_mm),\n#                    list(mean = ~mean(.x, na.rm = TRUE),\n#                           sd = ~sd(.x, na.rm = TRUE),\n#                            n = ~sum(!is.na(.x)))))\ndf |> \n  summarise(across(starts_with(\"bill\"),\n                   list(mean = \\(x) mean(x, na.rm = TRUE),\n                          sd = \\(x)   sd(x, na.rm = TRUE),\n                           n = \\(x)  sum(!is.na(x)))))## # A tibble: 1 × 6\n##   bill_length_mm_mean bill_leng…¹ bill_…² bill_…³ bill_…⁴ bill_…⁵\n##                 <dbl>       <dbl>   <int>   <dbl>   <dbl>   <int>\n## 1                43.9        5.46     342    17.2    1.97     342\n## # … with abbreviated variable names ¹​bill_length_mm_sd,\n## #   ²​bill_length_mm_n, ³​bill_depth_mm_mean, ⁴​bill_depth_mm_sd,\n## #   ⁵​bill_depth_mm_n\n# 関数のリストをオブジェクトfnlistに格納\nfnlist <- \n  list(mean = \\(x) mean(x, na.rm = TRUE),\n         sd = \\(x)   sd(x, na.rm = TRUE),\n          n = \\(x)  sum(!is.na(x)))\n\n\ndf |> \n  summarise(across(ends_with(\"mm\"),\n                   all_of(fnlist)))## # A tibble: 1 × 9\n##   bill_…¹ bill_…² bill_…³ bill_…⁴ bill_…⁵ bill_…⁶ flipp…⁷ flipp…⁸\n##     <dbl>   <dbl>   <int>   <dbl>   <dbl>   <int>   <dbl>   <dbl>\n## 1    43.9    5.46     342    17.2    1.97     342    201.    14.1\n## # … with 1 more variable: flipper_length_mm_n <int>, and\n## #   abbreviated variable names ¹​bill_length_mm_mean,\n## #   ²​bill_length_mm_sd, ³​bill_length_mm_n, ⁴​bill_depth_mm_mean,\n## #   ⁵​bill_depth_mm_sd, ⁶​bill_depth_mm_n,\n## #   ⁷​flipper_length_mm_mean, ⁸​flipper_length_mm_sd"},{"path":"summarise.html","id":"su-st-reorder","chapter":"6 要約値を作る：summarise","heading":"6.2.2 【並び替え】","text":"上記の出力は横に長いため見にくいtidyr::pivot_longer()で，データフレームの行列入れ替えができる引数をnames_patternとnames_toを下記のように指定することで，変数の接尾辞を列名にできる下記コードのsummarise()部分の構造は前のチャンクと変数名以外同じ","code":"\ndf |> \n  summarise(across(bill_length_mm:body_mass_g,\n                   list(mean = \\(x) mean(x, na.rm = TRUE),\n                          sd = \\(x)   sd(x, na.rm = TRUE),\n                           n = \\(x)  sum(!is.na(x))))) |> \n  pivot_longer(everything(),\n               names_to = c(\"items\", \".value\"), # \".value\"の部分を列名に\n               names_pattern = \"(.*)_(.*)\") 　  # 正規表現## # A tibble: 4 × 4\n##   items               mean     sd     n\n##   <chr>              <dbl>  <dbl> <int>\n## 1 bill_length_mm      43.9   5.46   342\n## 2 bill_depth_mm       17.2   1.97   342\n## 3 flipper_length_mm  201.   14.1    342\n## 4 body_mass_g       4202.  802.     342"},{"path":"summarise.html","id":"練習問題-15","chapter":"6 要約値を作る：summarise","heading":"6.2.3 [練習問題]","text":"dfデータの変数名に”length”を含む変数に対して平均値とSDとnを計算したデータフレームを作成して”res”オブジェクトに格納しよう次に作成したデータフレームをpivot_longer()を使って見やすいように縦に変換しよう","code":""},{"path":"summarise.html","id":"su-group","chapter":"6 要約値を作る：summarise","heading":"6.3 層別（グループ別）集計","text":"group_by()にグループを表す変数を指定するとできるグループを重ねることも可能","code":"\ndf |> \n  group_by(species) |> \n  summarise(across(c(bill_length_mm, bill_depth_mm),\n                   list(mean = \\(x) mean(x, na.rm = TRUE),\n                          sd = \\(x)   sd(x, na.rm = TRUE))))## # A tibble: 3 × 5\n##   species   bill_length_mm_mean bill_length_mm_sd bill_…¹ bill_…²\n##   <fct>                   <dbl>             <dbl>   <dbl>   <dbl>\n## 1 Adelie                   38.8              2.66    18.3   1.22 \n## 2 Chinstrap                48.8              3.34    18.4   1.14 \n## 3 Gentoo                   47.5              3.08    15.0   0.981\n## # … with abbreviated variable names ¹​bill_depth_mm_mean,\n## #   ²​bill_depth_mm_sd\ndf |> \n  group_by(species, sex) |> \n  summarise(across(c(bill_length_mm, bill_depth_mm),\n                   list(mean = \\(x) mean(x, na.rm = TRUE),\n                          sd = \\(x)   sd(x, na.rm = TRUE))))## # A tibble: 8 × 6\n## # Groups:   species [3]\n##   species   sex    bill_length_mm_mean bill_len…¹ bill_…² bill_…³\n##   <fct>     <fct>                <dbl>      <dbl>   <dbl>   <dbl>\n## 1 Adelie    female                37.3       2.03    17.6   0.943\n## 2 Adelie    male                  40.4       2.28    19.1   1.02 \n## 3 Adelie    <NA>                  37.8       2.80    18.3   1.27 \n## 4 Chinstrap female                46.6       3.11    17.6   0.781\n## 5 Chinstrap male                  51.1       1.56    19.3   0.761\n## 6 Gentoo    female                45.6       2.05    14.2   0.540\n## 7 Gentoo    male                  49.5       2.72    15.7   0.741\n## 8 Gentoo    <NA>                  45.6       1.37    14.6   0.810\n## # … with abbreviated variable names ¹​bill_length_mm_sd,\n## #   ²​bill_depth_mm_mean, ³​bill_depth_mm_sd"},{"path":"summarise.html","id":"練習問題-16","chapter":"6 要約値を作る：summarise","heading":"6.3.1 [練習問題]","text":"dfデータの変数”bill_length_mm”, “bill_depth_mm”について，3変数（species, island, sex）の層別平均値（変数名に”_平均”の接頭辞をつける）を計算しよう","code":""},{"path":"summarise.html","id":"su-fun","chapter":"6 要約値を作る：summarise","heading":"6.4 【効率化】関数にする","text":"関数作成の基本は(1.4.2.2参照)","code":""},{"path":"summarise.html","id":"su-fun-meansdn","chapter":"6 要約値を作る：summarise","heading":"6.4.1 複数変数の平均値とSDとnを計算する関数","text":"「{{ }}」はcurly curlyと読み，関数を作成するときに，代入先の変数名の場所を指定する時などに活躍\n下記の例の場合，{{ }}を外すと動かない\n下記の例の場合，{{ }}を外すと動かない例：引数にデータフレーム（data）と変数（vars）を入れると平均値とSDとnを返す関数mean_sd_n()を定義ここで定義した関数mean_sd_n()に引数としてデータフレームと変数を入れると結果が表示される引数varsの部分はacross()の第一引数に入れるものと同じ指定ができるため，変数ベクトルやヘルパー関数が入る","code":"\nmean_sd_n <- function(data, vars){\n  data |> \n    summarise(across({{vars}},\n                     list(mean = \\(x) mean(x, na.rm = TRUE),\n                            sd = \\(x) sd(x, na.rm = TRUE),\n                             n = \\(x) sum(!is.na(x)))))\n}\nmean_sd_n(df, bill_length_mm)## # A tibble: 1 × 3\n##   bill_length_mm_mean bill_length_mm_sd bill_length_mm_n\n##                 <dbl>             <dbl>            <int>\n## 1                43.9              5.46              342\n# 変数ベクトル\nmean_sd_n(df, c(flipper_length_mm, body_mass_g))## # A tibble: 1 × 6\n##   flipper_length_mm_mean flippe…¹ flipp…² body_…³ body_…⁴ body_…⁵\n##                    <dbl>    <dbl>   <int>   <dbl>   <dbl>   <int>\n## 1                   201.     14.1     342   4202.    802.     342\n## # … with abbreviated variable names ¹​flipper_length_mm_sd,\n## #   ²​flipper_length_mm_n, ³​body_mass_g_mean, ⁴​body_mass_g_sd,\n## #   ⁵​body_mass_g_n\n# 文字でも可能\n# mean_sd_n(df, c(\"flipper_length_mm\", \"body_mass_g\"))\n\n# ヘルパー関数\nmean_sd_n(df, starts_with(\"bill\"))## # A tibble: 1 × 6\n##   bill_length_mm_mean bill_leng…¹ bill_…² bill_…³ bill_…⁴ bill_…⁵\n##                 <dbl>       <dbl>   <int>   <dbl>   <dbl>   <int>\n## 1                43.9        5.46     342    17.2    1.97     342\n## # … with abbreviated variable names ¹​bill_length_mm_sd,\n## #   ²​bill_length_mm_n, ³​bill_depth_mm_mean, ⁴​bill_depth_mm_sd,\n## #   ⁵​bill_depth_mm_n"},{"path":"atogaki.html","id":"atogaki","chapter":"あとがき","heading":"あとがき","text":"本書で目指したタイトルにある「がんばらないデータ加工」の解説は，次回作に期待という展開になりました。本を手に取っていただいた方には申し訳ないですが，無事完了できるように応援していただければうれしいです。一方で，前作の『Rで読むExcelファイル』では果たせなかった，データ加工のための基本関数の解説は，ある程度達成することができました。できれば，今後もっと分かりやすい内容にブラッシュアップさせていきたいです。本書の執筆にあたり、同人誌制作の先輩である天川榎@EnokiAmakawa氏から今回も背中押し＆多くの助言をいただきました。この場を借りてお礼申し上げます。","code":""}]
