[{"path":"index.html","id":"hajimeni","chapter":"はじめに","heading":"はじめに","text":"本書『Rで読むExcelファイル』を書こうと思ったのは「RとRStudioを使いたい！と思う人がもっと増えればいいのに」という願いからです。使う人が多くなれば、新しい知識に出会いやすくなりますし、仕事でも使う機会が増える可能性があります。使う人を増やすためにはよい入門書やwebサイトが必要ですが、それは巷にあふれていて無料でアクセスできるものも多いです。例えばR Data Science（英語） 1日本社会心理学会　第5回春の方法論セミナー　RとRstudio入門 2そこで本書では目的を絞って、R（実際はすべてRStudioから使います）を使いたいと思わせる部分を解説することを目指します。Rでどんな便利なことができるか、入門書などでもあまり深く解説されてない部分にフォーカスして紹介します。","code":""},{"path":"index.html","id":"本書の特徴","chapter":"はじめに","heading":"本書の特徴","text":"これまでの解説で不足していること\n便利な関数や基本的な使い方の解説は多いが，データ加工の実務上知りたいコード例が豊富なわけではない\n同じ作業を大量の変数についてくり返し実行したい時のやり方の解説は少ない\nこれまでの解説で不足していること便利な関数や基本的な使い方の解説は多いが，データ加工の実務上知りたいコード例が豊富なわけではない同じ作業を大量の変数についてくり返し実行したい時のやり方の解説は少ないまずはよくあるモダンなRのデータラングリング解説まずはよくあるモダンなRのデータラングリング解説本書の強みは，くり返し同じ作業する部分を効率化したコードを併せて解説する点本書の強みは，くり返し同じ作業する部分を効率化したコードを併せて解説する点自分の学習経験から，そのコード例が知りたかったんだ！という実用的な方法を収集自分の学習経験から，そのコード例が知りたかったんだ！という実用的な方法を収集「がんばらない」とは，単純作業のくり返しに無駄なエネルギーを注がなくてよいようにすること「がんばらない」とは，単純作業のくり返しに無駄なエネルギーを注がなくてよいようにすることまず基本の書き方を解説した後に，__【効率化】__でより効率的にコードを書く解説を行う\n*【効率化】のタグが本書の核心になる。手作業の繰り返しをなるべく避けることが目指すべき点だからである。まず基本の書き方を解説した後に，__【効率化】__でより効率的にコードを書く解説を行う\n*【効率化】のタグが本書の核心になる。手作業の繰り返しをなるべく避けることが目指すべき点だからである。冗長だが【別解】を示すことで様々な関数の働きを理解でき，データ加工の幅が広がる冗長だが【別解】を示すことで様々な関数の働きを理解でき，データ加工の幅が広がる本書の内容は、githubレポジトリの  ですべて公開しています。コードやサンプルデータはこちらのレポジトリをダウンロードしてお試しください。pdf版が読みたい方は、以下のページで無料で入手可能です。自力でできる方は、Build Bookでも作成できます。技術書典マーケットの販売ページ","code":""},{"path":"index.html","id":"想定読者","chapter":"はじめに","heading":"想定読者","text":"色々なExcelファイルを読み込んで分析する機会があるのであれば、全くRのことを知らない方から、少しRの経験があるけど複数のファイルを一度に読みこんだことはないというレベルの方ぐらいまでが対象となるでしょう。本書の到達目標は、RでのExcelファイルの読み書きレベルをある程度高める、という所に定めました。その先は是非好きなように可視化なり解析なり進めていただければと思います。とはいえ、そこでお好きなように！と言われても路頭に迷う方もいるかもしれないので、データの内容把握に関して、要約値や欠損値の一覧、簡単な可視化、相関の一覧についても少しだけ解説しました。その一助として、特別付録として本書と並行してまとめた、可視化のためのggplot2の辞書（特別付録について参照）もあります。なお、データをきれいにする過程（例：前処理、データクリーニング、データクレンジング、データラングリングなど）については多くの説明を要するため、本書の範囲を超えます。これはまた別機会にまとめられたらなと思っています。まず2章では、RStudioでファイルを読み書きする際に、最低限知っておいた方がよい知識について解説しておきます。とっつきにくいかもしれませんが、知っておいてよかったと後になって実感する類のものなので、使って慣れていきましょう。4章は本書のメインであるExcelファイルの読み込みについて解説します。一つのファイルの読み込みから、複数シート、複数ファイルの読み込みまで、様々なシーンに対応しました。また、読みこんだファイルを一つのデータフレーム3にまとめる方法についても触れています。章はExcelファイルの保存についてです。ここでも、一つのファイルの保存から、複数ファイルの保存まで解説します。ここまでの内容が理解できれば、大量ファイルの読み書きにまつわる単純な繰り返し作業とはさよならできるでしょう。章は関連知識としてcsvファイルの読み込みと保存について解説します。windowsユーザーは文字コードの違いによる文字化けというつらみと対峙することになり、初学者はここで脱落していくことが多いのではないかと思います。そのために、サバイバルスキルとして知っておくことが有用だと思い書いておきました。自分が相当苦しんだので…章は、読み込んだファイルの特徴をざっと把握する方法について解説しました。ここまでやれば、（きれいなデータであれば！）きっとデータ解析に入っていくことができるでしょう。","code":""},{"path":"index.html","id":"前提","chapter":"はじめに","heading":"0.0.1 前提","text":"プロジェクト%>% tidyverseを読み込めば使えるdplyr::select()","code":""},{"path":"index.html","id":"執筆環境","chapter":"はじめに","heading":"執筆環境","text":"本書はbookdownにて執筆しました 4本書はbookdownにて執筆しました 4RおよびRStudio、パッケージのバージョン\nR version 3.6.1\nRStudio version 1.3.1073\nreadxl version 1.3.1\ntidyverse version 1.3.0\nRおよびRStudio、パッケージのバージョンR version 3.6.1RStudio version 1.3.1073readxl version 1.3.1tidyverse version 1.3.0","code":""},{"path":"index.html","id":"注意事項など","chapter":"はじめに","heading":"注意事項など","text":"本書の内容はすべてwindows環境を想定しています。本書の内容はすべてwindows環境を想定しています。この本に書いてある内容は、筆者が学習したことをまとめているものにすぎないため、正常な動作の保証はできません。使用する際は、自己責任でお願いします。この本に書いてある内容は、筆者が学習したことをまとめているものにすぎないため、正常な動作の保証はできません。使用する際は、自己責任でお願いします。","code":""},{"path":"index.html","id":"huroku","chapter":"はじめに","heading":"特別付録について","text":"本書の執筆に先駆けて、順序が違う気がしますがまず付録の作成からはじめました。特別付録は以下でアクセス可能なオンライン付録となります。ggplot2の辞書\nhttps://izunyan.github.io/practice_ggplot2/\nhttps://izunyan.github.io/practice_ggplot2/Twitterで応援してもらったら項目が増えていく仕様にしているので、もっと読みたい方はこちらのツイートに何らかのレスポンスください！","code":""},{"path":"premise.html","id":"premise","chapter":"1 前提知識","heading":"1 前提知識","text":"","code":""},{"path":"premise.html","id":"p-howtoread","chapter":"1 前提知識","heading":"1.1 本書に出てくるコード部分の見方","text":"グレーの背景部分はRのコードが書いてあり，その下の##で始まる部分は出力結果を表す\n\nここでは1 + 1がコード部分で，## [1] 2が出力結果部分[1]というのは，その次にくる値（ここでは１つしかないが）が何番目にあるかを示しているたとえば，1から50までの数値を出力してみる\nコロン:で最初と最後の値をつなぐことで連番を表現できる\nコロン:で最初と最後の値をつなぐことで連番を表現できるコード部分に#で始まる文章がある場合は，コメントを表す。ここは実行されないので説明のために書かれる","code":"\n1 + 1## [1] 2\n1:50##  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n## [26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n# *ｼ医い繧ｹ繧ｿ繝ｪ繧ｹ繧ｯｼ<89> 縺ｯ謗帙￠邂励〒縺ゅｋ縺薙→繧堤､ｺ縺<99>NA2 * 3  # 縺薙％縺ｫ繧ゅさ繝｡繝ｳ繝医ｒ蜈･繧後ｉ繧後ｋNA## [1] 6"},{"path":"premise.html","id":"p-project","chapter":"1 前提知識","heading":"1.2 プロジェクト","text":"データを加工して解析する際に、1つのフォルダ（サブフォルダも含む）の中に関連するデータやコードなどをまとめておき、そのフォルダを プロジェクト と設定するこれにより、ファイルの読み書きの際の場所指定をいちいち意識しないで作業できるようになる詳しくは拙書の解説参照","code":""},{"path":"premise.html","id":"p-package","chapter":"1 前提知識","heading":"1.3 パッケージ","text":"様々な関数やデータなどがまとまっていて，読み込むと色々なことができる\n逆にいえば読み込まないと便利な作業ができないことが多い\n逆にいえば読み込まないと便利な作業ができないことが多い例：library(tidyverse)またはrequire(tidyverse) のように書くことで読み込めるパッケージを読み込まなくても，パッケージ名::関数名()でパッケージ内の関数が使える\nどのパッケージの関数か明示するのにも便利なので，本書では多用する\nどのパッケージの関数か明示するのにも便利なので，本書では多用する","code":""},{"path":"premise.html","id":"p-function","chapter":"1 前提知識","heading":"1.4 関数","text":"適切な値や変数などを指定すれば，データの処理や計算，統計解析など様々な処理を簡単に実行してくれる例えばmean( )などのように関数名( )で出てくるので，( )で囲まれてる所を見たらほぼ関数だと思えばよさそう( )の中に入る値を 引数 （ひきすう）と呼ぶ引数は,でつないで追加していき，これによって実行したい処理のカスタマイズが可能\n　 + 関数の( )の最初の位置に来るものを 第一引数 という","code":""},{"path":"premise.html","id":"p-function-ex","chapter":"1 前提知識","heading":"1.4.1 例","text":"","code":""},{"path":"premise.html","id":"p-function-ex-c","chapter":"1 前提知識","heading":"1.4.1.1 複数のものを1つにする: c( )","text":"ベクトル を作る（複数のものを1つにする）ための関数。慣れてる人は当たり前に使っているので，初学者にとって理解しとくとよい最重要関数と思われる","code":"\nc(1,2,3)## [1] 1 2 3\nc(\"a\", \"b\", \"c\") # \" \"縺ｧ蝗ｲ縺ｾ繧後ｋ蛟､縺ｯ譁<87>蟄励ｒ陦ｨ縺<99>NA## [1] \"a\" \"b\" \"c\"\n# 隍<87>謨ｰ縺ゅｋ繧医≧縺ｫ隕九∴繧九′螳溘<81>ｯ1縺､縺ｮ繝吶け繝医Ν縺ｫ縺ｪ縺｣縺ｦ縺<84>繧倶ｾ<8b>NA1:10##  [1]  1  2  3  4  5  6  7  8  9 10"},{"path":"premise.html","id":"p-function-ex-m","chapter":"1 前提知識","heading":"1.4.1.2 平均値：mean( )","text":"引数にベクトルを入れることで平均値を計算する","code":"\nmean(c(1,2,3))## [1] 2\n# 谺謳榊､ｼ<88>NAｼ峨′縺ゅｋ縺ｨ邨先棡縺君ANAmean(c(1, NA, 3))## [1] NA\n# 蠑墓焚縺ｫna.rm = TRUE繧定ｿｽ蜉縺吶ｋ縺ｨ邨先棡縺悟<87>ｺ繧九ょ渕譛ｬ逧<84>縺ｫ螳溷漁荳翫<81>ｯ蟶ｸ縺ｫ縺､縺代※縺翫＞縺溘⊇縺<86>縺後ｈ縺<84>NAmean(c(1, NA, 3), na.rm = TRUE)## [1] 2"},{"path":"premise.html","id":"p-object","chapter":"1 前提知識","heading":"1.5 オブジェクト","text":"計算の結果や，複数の数値や文字など（他にも色々）を1つの文字列に格納することができ，その後のコードで活用できる<-RStudioではショートカットalt + -で出せる(MacはOption + -)この後説明するデータフレームもオブジェクトに入れられる\nデータの少ないミニデータを作る時や，計算結果を格納するときに多用\nデータの少ないミニデータを作る時や，計算結果を格納するときに多用","code":""},{"path":"premise.html","id":"p-object-ex","chapter":"1 前提知識","heading":"1.5.1 例","text":"","code":"\nres <- 1 + 1\nres## [1] 2\nres2 <- c(1, 2:4, 5)\nres2## [1] 1 2 3 4 5\nres3 <- c(\"a\", \"b\")\nres3## [1] \"a\" \"b\"\nrm(res, res2, res3)"},{"path":"premise.html","id":"p-df","chapter":"1 前提知識","heading":"1.6 データフレーム","text":"","code":""},{"path":"premise.html","id":"本書で使う主なデータ","chapter":"1 前提知識","heading":"1.6.1 本書で使う主なデータ","text":"","code":""},{"path":"premise.html","id":"ペンギンデータ","chapter":"1 前提知識","heading":"1.6.1.1 ペンギンデータ","text":"palmerpenguinsパッケージのpenguinsデータ","code":""},{"path":"premise.html","id":"p-pipe","chapter":"1 前提知識","heading":"1.7 %>% （パイプ演算子）","text":"RStudioのショートカットはCtrl + Shift + M(MacはCmd + Shift + M)R version 4.1からは|>が大体同じ機能を持つ演算子して実装されたので，特にパッケージの読み込みをせずに使えるようになった。こちらを使う説明も今後増えていくと思われる\nショートカットで出るパイプを切り替えたい場合は，RStudioのTools > Global Options > Code > Editing > use native pipe operatorにチェックを入れる\n現時点ではデータフレームを第一引数へ渡す形式でない関数の場合（lm( )など），工夫が必要な場合があるようなので，本書では%>%を使用\nショートカットで出るパイプを切り替えたい場合は，RStudioのTools > Global Options > Code > Editing > use native pipe operatorにチェックを入れる現時点ではデータフレームを第一引数へ渡す形式でない関数の場合（lm( )など），工夫が必要な場合があるようなので，本書では%>%を使用","code":""},{"path":"select.html","id":"select","chapter":"2 変数（列）を選ぶ：select( )","heading":"2 変数（列）を選ぶ：select( )","text":"パッケージdplyrの関数select()tidyな世界では「列名 = 変数名」変数が多い時に関心ある変数に限定したデータにしたい関心ある変数の名前を取得したい後々出てくる繰り返し作業で便利なヘルパー関数","code":""},{"path":"select.html","id":"select-read","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.1 データ読み込み","text":"データの指定を簡単にするために，penguinsデータをdfと読み込む読み込みの様々な方法については拙書『Rで読むExcelファイル』参照","code":"\nlibrary(tidyverse)\n\n# 繝代ャ繧ｱ繝ｼ繧ｸ縺悟<85>･縺｣縺ｦ縺ｪ縺代ｌ縺ｰ荳玖ｨ伜ｮ溯｡<8c>NA# install.packages(\"palmerpenguins\")\n\ndf <- \n  palmerpenguins::penguins\n  \ndf # 繝<87>繝ｼ繧ｿ縺ｮ陦ｨ遉ｺ NA## # A tibble: 344 x 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_~\n##   <fct>   <fct>              <dbl>         <dbl>            <int>\n## 1 Adelie  Torgersen           39.1          18.7              181\n## 2 Adelie  Torgersen           39.5          17.4              186\n## 3 Adelie  Torgersen           40.3          18                195\n## # ... with 341 more rows, and 3 more variables:\n## #   body_mass_g <int>, sex <fct>, year <int>"},{"path":"select.html","id":"select-standard","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.2 基本","text":"select( )の中に関心のある変数名を,をつけて並べる\n変数は1つからOK\n変数は1つからOK新しいデータフレームを作りたい場合は<-を使って新しいオブジェクトに格納する","code":"\ndf %>% \n  select(bill_length_mm, bill_depth_mm)## # A tibble: 344 x 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # ... with 341 more rows\ndf2 <- \n  df %>% select(bill_length_mm)\n\ndf2## # A tibble: 344 x 1\n##   bill_length_mm\n##            <dbl>\n## 1           39.1\n## 2           39.5\n## 3           40.3\n## # ... with 341 more rows"},{"path":"select.html","id":"select-range","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.2.1 範囲指定","text":"関心ある変数が指定された範囲に含まれていれば:でつなげて取得できる\n変数の連番をまとめて指定する時などに便利（例 変数1:変数100）\n変数の連番をまとめて指定する時などに便利（例 変数1:変数100）範囲に加えて追加の変数を追加できる\n飛び飛びの変数群を選びたいときに有用\n飛び飛びの変数群を選びたいときに有用","code":"\ndf %>% \n  select(bill_length_mm:flipper_length_mm)## # A tibble: 344 x 3\n##   bill_length_mm bill_depth_mm flipper_length_mm\n##            <dbl>         <dbl>             <int>\n## 1           39.1          18.7               181\n## 2           39.5          17.4               186\n## 3           40.3          18                 195\n## # ... with 341 more rows\ndf %>% \n  select(bill_length_mm:flipper_length_mm, sex)## # A tibble: 344 x 4\n##   bill_length_mm bill_depth_mm flipper_length_mm sex   \n##            <dbl>         <dbl>             <int> <fct> \n## 1           39.1          18.7               181 male  \n## 2           39.5          17.4               186 female\n## 3           40.3          18                 195 female\n## # ... with 341 more rows"},{"path":"select.html","id":"select_cha","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.2.2 中身が文字でも動く","text":"変数名が\" \"で囲われていると，Rでは文字(character)だと認識されるこれは効率化を図りたいときに重要な特徴select( )の中にたくさんの変数名を並べるより，事前に指定しておき代入した方が読みやすい\n様々なコード例でこの事前指定が多用されるので慣れるとよい\n様々なコード例でこの事前指定が多用されるので慣れるとよいここでvarsは文字ベクトル（vector）のオブジェクトとなっているall_of( )の中に文字ベクトルを指定することで，それぞれの中身を変数名として認識する\n以前使われていたone_ofは現在は非推奨\n以前使われていたone_ofは現在は非推奨","code":"\ndf %>% \n  select(\"bill_length_mm\", \"bill_depth_mm\")## # A tibble: 344 x 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # ... with 341 more rows\n# 縺ゅｉ縺九§繧√が繝悶ず繧ｧ繧ｯ繝茨ｼ医％縺薙〒縺ｯvarsｼ峨↓蠑墓焚繧呈ｼ邏阪＠縺ｦ蠕後〒菴ｿ縺医ｋNAvars <- c(\"bill_length_mm\", \"bill_depth_mm\")\n\ndf %>% \n  select(all_of(vars))## # A tibble: 344 x 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # ... with 341 more rows"},{"path":"select.html","id":"select-helper","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3 変数の指定に便利なヘルパー関数","text":"selection helperと呼ばれるtidyselectパッケージの関数群selectの所で解説されることが多いが，後から出てくるacross()と併せた活用場面が多いため，なじんでおくと後から楽になる","code":""},{"path":"select.html","id":"select_helper1","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3.1 変数名の最初の文字列","text":"billから始まる変数を選ぶ","code":"\ndf %>%\n  select(starts_with(\"bill\"))## # A tibble: 344 x 2\n##   bill_length_mm bill_depth_mm\n##            <dbl>         <dbl>\n## 1           39.1          18.7\n## 2           39.5          17.4\n## 3           40.3          18  \n## # ... with 341 more rows"},{"path":"select.html","id":"select-helper2","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3.2 変数名の最後の文字列","text":"_mmで終わる変数を選ぶ\nmmだけだと他にも含まれる場合が出てくるので，_も含めた方が安全\nmmだけだと他にも含まれる場合が出てくるので，_も含めた方が安全","code":"\ndf %>%\n  select(ends_with(\"_mm\"))## # A tibble: 344 x 3\n##   bill_length_mm bill_depth_mm flipper_length_mm\n##            <dbl>         <dbl>             <int>\n## 1           39.1          18.7               181\n## 2           39.5          17.4               186\n## 3           40.3          18                 195\n## # ... with 341 more rows"},{"path":"select.html","id":"select-helper3","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3.3 変数名のどこかに含まれる文字列","text":"指定した文字列を含んだ変数名を対象とする","code":"\ndf %>%\n  select(contains(\"length\"))## # A tibble: 344 x 2\n##   bill_length_mm flipper_length_mm\n##            <dbl>             <int>\n## 1           39.1               181\n## 2           39.5               186\n## 3           40.3               195\n## # ... with 341 more rows"},{"path":"select.html","id":"select-helper4","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3.3.1 変数名のどこかに含まれる文字列：その2","text":"文字列で 正規表現 が使えるため柔軟な指定が可能ここでは，“length”または”depth”を含む変数名を対象\n|が「または」を意味する\n|が「または」を意味する","code":"\ndf %>%\n  select(matches(\"length|depth\"))## # A tibble: 344 x 3\n##   bill_length_mm bill_depth_mm flipper_length_mm\n##            <dbl>         <dbl>             <int>\n## 1           39.1          18.7               181\n## 2           39.5          17.4               186\n## 3           40.3          18                 195\n## # ... with 341 more rows"},{"path":"select.html","id":"select-helper5","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3.4 上記の組み合わせ","text":"","code":""},{"path":"select.html","id":"select-helper5-1","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3.4.1 かつ","text":"それぞれの条件を両方満たす","code":"\ndf %>%\n  select(starts_with(\"bill\") & contains(\"length\"))## # A tibble: 344 x 1\n##   bill_length_mm\n##            <dbl>\n## 1           39.1\n## 2           39.5\n## 3           40.3\n## # ... with 341 more rows"},{"path":"select.html","id":"select-helper5-2","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3.4.2 または","text":"それぞれの条件をいずれか満たす","code":"\ndf %>%\n  select(starts_with(\"bill\") | contains(\"length\"))## # A tibble: 344 x 3\n##   bill_length_mm bill_depth_mm flipper_length_mm\n##            <dbl>         <dbl>             <int>\n## 1           39.1          18.7               181\n## 2           39.5          17.4               186\n## 3           40.3          18                 195\n## # ... with 341 more rows"},{"path":"select.html","id":"select-helper6","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.3.5 数値範囲","text":"","code":"\nnum_range## function (prefix, range, width = NULL, vars = NULL) \n## {\n##     vars <- vars %||% peek_vars(fn = \"num_range\")\n##     if (!is_null(width)) {\n##         range <- sprintf(paste0(\"%0\", width, \"d\"), range)\n##     }\n##     match_vars(paste0(prefix, range), vars)\n## }\n## <bytecode: 0x000000002770b358>\n## <environment: namespace:tidyselect>"},{"path":"select.html","id":"select-drop","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.4 特定の変数を選ばない（落とす）","text":"変数名の前に!をつける複数列を落としたい場合は，!c( )の中に対象の列名を含める","code":"\ndf %>% \n  select(!species)## # A tibble: 344 x 7\n##   island    bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>              <dbl>         <dbl>             <int>\n## 1 Torgersen           39.1          18.7               181\n## 2 Torgersen           39.5          17.4               186\n## 3 Torgersen           40.3          18                 195\n## # ... with 341 more rows, and 3 more variables:\n## #   body_mass_g <int>, sex <fct>, year <int>\ndf %>% \n  select(!c(bill_length_mm:flipper_length_mm, sex))## # A tibble: 344 x 4\n##   species island    body_mass_g  year\n##   <fct>   <fct>           <int> <int>\n## 1 Adelie  Torgersen        3750  2007\n## 2 Adelie  Torgersen        3800  2007\n## 3 Adelie  Torgersen        3250  2007\n## # ... with 341 more rows"},{"path":"select.html","id":"変数を並び変える","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.5 変数を並び変える","text":"","code":""},{"path":"select.html","id":"変数名を変更する","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.6 変数名を変更する","text":"","code":""},{"path":"select.html","id":"関心のある変数名を取得する","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.7 関心のある変数名を取得する","text":"データ分析の段階では，関心のある変数名を選択して，それらを代入する作業が頻出変数名手打ちだと時間もかかるしミスもあるので，効率化のために必ずおさえておきたい技術","code":""},{"path":"select.html","id":"全ての変数名","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.7.1 全ての変数名","text":"","code":"\ndf %>% names()## [1] \"species\"           \"island\"            \"bill_length_mm\"   \n## [4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n## [7] \"sex\"               \"year\""},{"path":"select.html","id":"選択した変数名を取得","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.7.2 選択した変数名を取得","text":"ベクトル","code":"\nbill_vars <- \n  df %>% \n  select(starts_with(\"bill\")) %>% \n  names()\n\nbill_vars## [1] \"bill_length_mm\" \"bill_depth_mm\""},{"path":"select.html","id":"コピペに便利な形式に出力","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.7.3 コピペに便利な形式に出力","text":",で区切られた形式で出てくればそのままselect()に入れられるのに…と思った方のための便利関数dput()\" \"すらもいらない，という時は，新しくr script(アイコンNew Fileまたはctrl + shift + n)開いて，dput()の出力を貼り付けてすべて置換する方法も","code":"\ndf %>% \n  select(starts_with(\"b\")) %>% # b縺九ｉ蟋九∪繧句､画焚蜷<8d>NAnames() %>% \n  dput()## c(\"bill_length_mm\", \"bill_depth_mm\", \"body_mass_g\")"},{"path":"select.html","id":"応用編複数データフレームで同時にselect","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.8 【応用編】複数データフレームで同時にselect","text":"","code":""},{"path":"select.html","id":"複数データフレームで同じようにselect","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.8.1 複数データフレームで同じようにselect","text":"","code":""},{"path":"select.html","id":"複数データフレームで別々にselect","chapter":"2 変数（列）を選ぶ：select( )","heading":"2.8.2 複数データフレームで別々にselect","text":"https://izunyan.github.io/practice_bfi/#13_%E3%82%AF%E3%83%AD%E3%83%B3%E3%83%90%E3%83%83%E3%82%AF%E3%81%AE%E3%82%A2%E3%83%AB%E3%83%95%E3%82%A1","code":""},{"path":"rename.html","id":"rename","chapter":"3 変数名を変更する：rename( )","heading":"3 変数名を変更する：rename( )","text":"パッケージdplyrの関数rename()tidyな世界では「列名 = 変数名」変数が多い時に関心ある変数に限定したデータにしたい関心ある変数の名前を取得したい","code":""},{"path":"rename.html","id":"rename-standard","chapter":"3 変数名を変更する：rename( )","heading":"3.1 基本","text":"変更したい変数名を new = old の順に入力する\nここではbill_length_mmをblmmに変更してみる\nここではbill_length_mmをblmmに変更してみる複数の変数名を変更する場合は，rename()の中に,でつなげていく\nたくさんある場合に一つ一つ書いていくのは大変\nたくさんある場合に一つ一つ書いていくのは大変複数変数を扱うときはrename_with()が便利。以下はそれを用いた例を示していく","code":"\ndf %>% names()## [1] \"species\"           \"island\"            \"bill_length_mm\"   \n## [4] \"bill_depth_mm\"     \"flipper_length_mm\" \"body_mass_g\"      \n## [7] \"sex\"               \"year\"\ndf %>% \n  rename(blmm = bill_length_mm)## # A tibble: 344 x 8\n##   species island  blmm bill_depth_mm flipper_length_~ body_mass_g\n##   <fct>   <fct>  <dbl>         <dbl>            <int>       <int>\n## 1 Adelie  Torge~  39.1          18.7              181        3750\n## 2 Adelie  Torge~  39.5          17.4              186        3800\n## 3 Adelie  Torge~  40.3          18                195        3250\n## # ... with 341 more rows, and 2 more variables: sex <fct>,\n## #   year <int>\n# 隍<87>謨ｰ繧池ename縺吶ｋ蝣ｴ蜷<88>NAdf %>% \n  rename(blmm = bill_length_mm,\n         bdmm = bill_depth_mm)## # A tibble: 344 x 8\n##   species island    blmm  bdmm flipper_length_~ body_mass_g sex  \n##   <fct>   <fct>    <dbl> <dbl>            <int>       <int> <fct>\n## 1 Adelie  Torgers~  39.1  18.7              181        3750 male \n## 2 Adelie  Torgers~  39.5  17.4              186        3800 fema~\n## 3 Adelie  Torgers~  40.3  18                195        3250 fema~\n## # ... with 341 more rows, and 1 more variable: year <int>"},{"path":"rename.html","id":"rename-samew","chapter":"3 変数名を変更する：rename( )","heading":"3.2 同じ語を共通の語で置き換える","text":"変数名の”bill”の部分を日本語の”くちばし”に変更していくまずは基本の知識でできる方法","code":"df %>% \n  rename(くちばし_length_mm = bill_length_mm,\n         くちばし_depth_mm = bill_depth_mm)## # A tibble: 344 x 8\n##   species island    くちばし_length_mm くちばし_depth_mm\n##   <fct>   <fct>                  <dbl>             <dbl>\n## 1 Adelie  Torgersen               39.1              18.7\n## 2 Adelie  Torgersen               39.5              17.4\n## 3 Adelie  Torgersen               40.3              18  \n## # ... with 341 more rows, and 4 more variables:\n## #   flipper_length_mm <int>, body_mass_g <int>, sex <fct>,\n## #   year <int>"},{"path":"rename.html","id":"rename-strreplace1","chapter":"3 変数名を変更する：rename( )","heading":"3.2.1 【効率化】str_replace()で一括変換(1)","text":"`rename_with``は，まず適用したい関数を示し，そのあとに該当する変数を選ぶ適用したい関数の中にある.の部分に，その後選ぶ変数が入っていく語の置き換えはstringr::str_replace()を使う","code":"df %>% \n  rename_with(~str_replace(., \"bill\", \"くちばし\"),\n              starts_with(\"bill\"))## # A tibble: 344 x 8\n##   species island    くちばし_length_mm くちばし_depth_mm\n##   <fct>   <fct>                  <dbl>             <dbl>\n## 1 Adelie  Torgersen               39.1              18.7\n## 2 Adelie  Torgersen               39.5              17.4\n## 3 Adelie  Torgersen               40.3              18  \n## # ... with 341 more rows, and 4 more variables:\n## #   flipper_length_mm <int>, body_mass_g <int>, sex <fct>,\n## #   year <int>"},{"path":"rename.html","id":"rename-strreplace1-other","chapter":"3 変数名を変更する：rename( )","heading":"3.2.1.1 【別解】","text":"selectのように単にc( )の中に変数を指定していくだけでも動く","code":"df %>% \n  rename_with(~str_replace(., \"bill\", \"くちばし\"),\n              c(bill_length_mm, bill_depth_mm))## # A tibble: 344 x 8\n##   species island    くちばし_length_mm くちばし_depth_mm\n##   <fct>   <fct>                  <dbl>             <dbl>\n## 1 Adelie  Torgersen               39.1              18.7\n## 2 Adelie  Torgersen               39.5              17.4\n## 3 Adelie  Torgersen               40.3              18  \n## # ... with 341 more rows, and 4 more variables:\n## #   flipper_length_mm <int>, body_mass_g <int>, sex <fct>,\n## #   year <int>"},{"path":"rename.html","id":"rename-remove","chapter":"3 変数名を変更する：rename( )","heading":"3.3 同じ語を削除する","text":"“_mm”を取り除きたい場合，それを削除した変数名を指定すればよいが，たくさんあると大変","code":"\ndf %>% \n  rename(bill_length = bill_length_mm,\n         bill_depth  = bill_depth_mm,\n         flipper_length = flipper_length_mm)## # A tibble: 344 x 8\n##   species island    bill_length bill_depth flipper_length\n##   <fct>   <fct>           <dbl>      <dbl>          <int>\n## 1 Adelie  Torgersen        39.1       18.7            181\n## 2 Adelie  Torgersen        39.5       17.4            186\n## 3 Adelie  Torgersen        40.3       18              195\n## # ... with 341 more rows, and 3 more variables:\n## #   body_mass_g <int>, sex <fct>, year <int>"},{"path":"rename.html","id":"rename-strreplace2","chapter":"3 変数名を変更する：rename( )","heading":"3.3.1 【効率化】str_replace()で一括変換（2）","text":"str_replace()で変換先に空白\"\"を指定すると削除できる","code":"\ndf %>% \n  rename_with(~str_replace(., \"_mm\", \"\"),\n              ends_with(\"mm\"))## # A tibble: 344 x 8\n##   species island    bill_length bill_depth flipper_length\n##   <fct>   <fct>           <dbl>      <dbl>          <int>\n## 1 Adelie  Torgersen        39.1       18.7            181\n## 2 Adelie  Torgersen        39.5       17.4            186\n## 3 Adelie  Torgersen        40.3       18              195\n## # ... with 341 more rows, and 3 more variables:\n## #   body_mass_g <int>, sex <fct>, year <int>"},{"path":"rename.html","id":"別解","chapter":"3 変数名を変更する：rename( )","heading":"3.3.1.1 【別解】","text":"stringr::str_remove()の方が直接的","code":"\ndf %>% \n  rename_with(~str_remove(., \"_mm\"),\n              ends_with(\"mm\"))## # A tibble: 344 x 8\n##   species island    bill_length bill_depth flipper_length\n##   <fct>   <fct>           <dbl>      <dbl>          <int>\n## 1 Adelie  Torgersen        39.1       18.7            181\n## 2 Adelie  Torgersen        39.5       17.4            186\n## 3 Adelie  Torgersen        40.3       18              195\n## # ... with 341 more rows, and 3 more variables:\n## #   body_mass_g <int>, sex <fct>, year <int>"},{"path":"rename.html","id":"rename-add","chapter":"3 変数名を変更する：rename( )","heading":"3.4 同じ接尾辞をつける","text":"変数yearで2007年のみのデータに限定し，くちばし（bill）と翼（flipper）の変数名の末に”_2007”をつけるrenameの中に全部書いていけばできれば数が多いと大変","code":"\ndf %>% \n  filter(year == 2007) %>% \n  select(bill_length_mm:flipper_length_mm, year) %>% \n  rename(bill_length_mm_2007 = bill_length_mm,\n         bill_depth_mm_2007  = bill_depth_mm,\n         flipper_length_mm_2007 = flipper_length_mm)## # A tibble: 110 x 4\n##   bill_length_mm_2007 bill_depth_mm_2007 flipper_length_mm~  year\n##                 <dbl>              <dbl>              <int> <int>\n## 1                39.1               18.7                181  2007\n## 2                39.5               17.4                186  2007\n## 3                40.3               18                  195  2007\n## # ... with 107 more rows"},{"path":"rename.html","id":"rename-strc","chapter":"3 変数名を変更する：rename( )","heading":"3.4.1 【効率化】str_c()で一括指定","text":"適用したい関数の中にある.の部分に，その後選ぶ変数が入っていくstringr::str_c()で指定した語をくっつけるここでは変数year以外なので，!をつけることで変数を指定できる","code":"\ndf %>% \n  filter(year == 2007) %>% \n  select(bill_length_mm:flipper_length_mm, year) %>% \n  rename_with(~str_c(., \"_2007\"),\n               !year)## # A tibble: 110 x 4\n##   bill_length_mm_2007 bill_depth_mm_2007 flipper_length_mm~  year\n##                 <dbl>              <dbl>              <int> <int>\n## 1                39.1               18.7                181  2007\n## 2                39.5               17.4                186  2007\n## 3                40.3               18                  195  2007\n## # ... with 107 more rows"},{"path":"rename.html","id":"rename-strc-other","chapter":"3 変数名を変更する：rename( )","heading":"3.4.1.1 【別解】","text":"","code":"\ndf %>% \nfilter(year == 2007) %>% \n  rename_with(~str_c(., \"_2007\"),\n               matches(\"bill|flipper\"))## # A tibble: 110 x 8\n##   species island    bill_length_mm_2007 bill_depth_mm_2007\n##   <fct>   <fct>                   <dbl>              <dbl>\n## 1 Adelie  Torgersen                39.1               18.7\n## 2 Adelie  Torgersen                39.5               17.4\n## 3 Adelie  Torgersen                40.3               18  \n## # ... with 107 more rows, and 4 more variables:\n## #   flipper_length_mm_2007 <int>, body_mass_g <int>, sex <fct>,\n## #   year <int>"},{"path":"rename.html","id":"rename-samew-z","chapter":"3 変数名を変更する：rename( )","heading":"3.5 同","text":"","code":"df %>% \n  rename(くちばし_length_mm = bill_length_mm,\n         くちばし_depth_mm = bill_depth_mm)## # A tibble: 344 x 8\n##   species island    くちばし_length_mm くちばし_depth_mm\n##   <fct>   <fct>                  <dbl>             <dbl>\n## 1 Adelie  Torgersen               39.1              18.7\n## 2 Adelie  Torgersen               39.5              17.4\n## 3 Adelie  Torgersen               40.3              18  \n## # ... with 341 more rows, and 4 more variables:\n## #   flipper_length_mm <int>, body_mass_g <int>, sex <fct>,\n## #   year <int>"},{"path":"rename.html","id":"rename-z2","chapter":"3 変数名を変更する：rename( )","heading":"3.5.1 【効率化】","text":"","code":"df %>% \n  rename_with(~str_replace(., \"bill\", \"くちばし\"),\n              starts_with(\"bill\"))## # A tibble: 344 x 8\n##   species island    くちばし_length_mm くちばし_depth_mm\n##   <fct>   <fct>                  <dbl>             <dbl>\n## 1 Adelie  Torgersen               39.1              18.7\n## 2 Adelie  Torgersen               39.5              17.4\n## 3 Adelie  Torgersen               40.3              18  \n## # ... with 341 more rows, and 4 more variables:\n## #   flipper_length_mm <int>, body_mass_g <int>, sex <fct>,\n## #   year <int>"},{"path":"filter.html","id":"filter","chapter":"4 ケース（行）を選ぶ","heading":"4 ケース（行）を選ぶ","text":"パッケージdplyrの関数filter()tidyな世界では「行 = ケース, 個人（wide形式の場合）」ケースが多い時に関心あるケースに限定したデータにしたい","code":""},{"path":"filter.html","id":"filter1","chapter":"4 ケース（行）を選ぶ","heading":"4.1 基本","text":"filter( )の引数に論理式（TRUE FALSEになるもの）を入れる\n論理式の部分について，最初の内はselect( )に入れるものと違って混乱するかもしれないが，慣れると段々分かってくると思う\n論理式の部分について，最初の内はselect( )に入れるものと違って混乱するかもしれないが，慣れると段々分かってくると思う種（species）がAdelieのケースのみ選ばれたくちばしの長さ（bill_length_mm）が50以上のケースのみ選ばれた","code":"\ndf %>% \n  filter(species == \"Adelie\")## # A tibble: 152 x 8\n##   species island    bill_length_mm bill_depth_mm flipper_length_~\n##   <fct>   <fct>              <dbl>         <dbl>            <int>\n## 1 Adelie  Torgersen           39.1          18.7              181\n## 2 Adelie  Torgersen           39.5          17.4              186\n## 3 Adelie  Torgersen           40.3          18                195\n## # ... with 149 more rows, and 3 more variables:\n## #   body_mass_g <int>, sex <fct>, year <int>\ndf %>% \n  filter(bill_length_mm >= 50)## # A tibble: 57 x 8\n##   species island bill_length_mm bill_depth_mm flipper_length_mm\n##   <fct>   <fct>           <dbl>         <dbl>             <int>\n## 1 Gentoo  Biscoe           50            16.3               230\n## 2 Gentoo  Biscoe           50            15.2               218\n## 3 Gentoo  Biscoe           50.2          14.3               218\n## # ... with 54 more rows, and 3 more variables:\n## #   body_mass_g <int>, sex <fct>, year <int>"},{"path":"mutate.html","id":"mutate","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5 新しい変数（列）の作成：mutate( )","text":"パッケージdplyrの関数mutate()新しい変数の列を作成する\n既にある\n既にあるmutateの機能解説効率化のためのacross()","code":""},{"path":"mutate.html","id":"mu-read","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.1 データ読み込み","text":"国際パーソナリティ項目プールからの2800名分のデータ。質問項目が25問あり，5つの構成概念（ここでは因子という）に対応する項目への回答を足し合わせたスコアを計算する性，教育歴，年齢の変数もあり項目に対し想定される因子（因子名の頭文字が変数名と対応）\nAgree A1からA5\nConscientious　 C1からC5\nExtraversion E1からE5\nNeuroticism　 N1からN5\nOpenness　　 O1からO5\nAgree A1からA5Conscientious　 C1からC5Extraversion E1からE5Neuroticism　 N1からN5Openness　　 O1からO5回答選択肢\n1 Inaccurate まったくあてはまらない\n2 Moderately Inaccurate あてはまらない\n3 Slightly Inaccurate ややあてはまらない\n4 Slightly Accurate ややあてはまる\n5 Moderately Accurate あてはまる\n6 Accurate 非常にあてはまる\n1 Inaccurate まったくあてはまらない2 Moderately Inaccurate あてはまらない3 Slightly Inaccurate ややあてはまらない4 Slightly Accurate ややあてはまる5 Moderately Accurate あてはまる6 Accurate 非常にあてはまる","code":"\n# 繝代ャ繧ｱ繝ｼ繧ｸ縺悟<85>･縺｣縺ｦ縺ｪ縺代ｌ縺ｰ荳玖ｨ伜ｮ溯｡<8c>NA# install.packages(\"psychTools\")\n\ndf_bfi <- \n  psychTools::bfi %>% \n  as_tibble()         # 陦ｨ遉ｺ縺ｫ萓ｿ蛻ｩ縺ｪtibble蠖｢蠑上↓NA"},{"path":"mutate.html","id":"mu-standard","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.2 基本","text":"データフレームに新しい列を計算して追加する関数mutate( )の中に新しく作成する変数名を入れ，=でつないで計算式を入れるここでは，まず変数A1の平均値（全ケース同じ値が入る）を計算し，個々の値の差分をする例を示すmean_a1列にはA1の平均値がすべて同じ値で入る（平均値だけの計算がしたければ6を参照）dif_a1_mean列は，A1列からmean_a1列を引いた値が入る","code":"\ndf_bfi %>% \n  select(A1) %>%                      # A1縺ｮ縺ｿ繧呈ｮ九☆NAmutate(\n    mean_a1 = mean(A1, na.rm = TRUE), # A1縺ｮ蟷ｳ蝮<87>蛟､繧剃ｽ懈<88>撰ｼ<88>NA縺ｯ髯､螟厄ｼ<89>NA= A1 - mean_a1)       # 蜷<84>蛟倶ｽ薙<81>ｮA1縺ｨ蟷ｳ蝮<87>蛟､縺ｮ蟾ｮ蛻<86>繧定ｨ育ｮ<97>NA## # A tibble: 2,800 x 3\n##      A1 mean_a1 dif_a1_mean\n##   <int>   <dbl>       <dbl>\n## 1     2    2.41      -0.413\n## 2     2    2.41      -0.413\n## 3     5    2.41       2.59 \n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-kata","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.3 変数の型の変換","text":"変数には型の情報が伴い，統計解析やデータ加工の際に適切な型を求められることがあるため理解が必要\n小数も扱う数値 <dbl>\n整数 <int>\n文字 <chr>\n因子 <fct>\n小数も扱う数値 <dbl>整数 <int>文字 <chr>因子 <fct>変数の型の確認は色々方法があるが，tibble形式のデータフレームならselect()でOK\ntibble形式でなくても，最後にglimpse()で確認可能\ntibble形式でなくても，最後にglimpse()で確認可能gender, education列が <int> になっているので整数型になっている","code":"\ndf_bfi %>% \n  select(gender, education)## # A tibble: 2,800 x 2\n##   gender education\n##    <int>     <int>\n## 1      1        NA\n## 2      2        NA\n## 3      2        NA\n## # ... with 2,797 more rows\ndf_bfi %>%\n  select(gender, education) %>%\n  glimpse()## Rows: 2,800\n## Columns: 2\n## $ gender    <int> 1, 2, 2, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, ~\n## $ education <int> NA, NA, NA, NA, NA, 3, NA, 2, 1, NA, 1, NA, N~"},{"path":"mutate.html","id":"mu-kata-trans","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.3.1 型の変換","text":"ここでは，2つの数値型変数gender, educationを因子型に変換する例を示すそれぞれfactor()で因子型に変換gender, education列が <fct> になっているので整数型になっている","code":"\ndf_bfi %>%\n  select(gender, education) %>% \n  mutate(gender = factor(gender),\n         education = factor(education))## # A tibble: 2,800 x 2\n##   gender education\n##   <fct>  <fct>    \n## 1 1      <NA>     \n## 2 2      <NA>     \n## 3 2      <NA>     \n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-kata-across","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.3.2 【効率化】複数の変数に対し一度の指定で実行","text":"変換したい変数が大量にあるときは上記の方法では大変across()を使うと，指定した変数に対して同じ内容の処理なら 1回 ですむようになる\nかつてのmutate_at(), mutate_if()など\nかつてのmutate_at(), mutate_if()など","code":"\ndf_bfi %>%\n  mutate(across(c(gender, education),\n                factor)) %>% \n  select(gender, education)   # 邨先棡陦ｨ遉ｺ縺ｮ縺溘ａ蜀鈴聞縺縺悟､峨ｏ縺｣縺溷､画焚縺縺壮electNA## # A tibble: 2,800 x 2\n##   gender education\n##   <fct>  <fct>    \n## 1 1      <NA>     \n## 2 2      <NA>     \n## 3 2      <NA>     \n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-across","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.4 across( )の特徴","text":"変数の指定に2.3で解説したヘルパー関数が使える??で解説した文字も使える","code":"\ndf_bfi %>%\n  mutate(across(starts_with(\"n\"),\n                factor)) %>% \n  select(starts_with(\"n\"))   # 邨先棡陦ｨ遉ｺ縺ｮ縺溘ａNA## # A tibble: 2,800 x 5\n##   N1    N2    N3    N4    N5   \n##   <fct> <fct> <fct> <fct> <fct>\n## 1 3     4     2     2     3    \n## 2 3     3     3     5     5    \n## 3 4     5     4     2     3    \n## # ... with 2,797 more rows\nvars <- c(\"N1\", \"N2\", \"N3\", \"N4\", \"N5\")\n\ndf_bfi %>%\n  mutate(across(all_of(vars),\n                factor)) %>% \n  select(starts_with(\"n\"))   # 邨先棡陦ｨ遉ｺ縺ｮ縺溘ａNA## # A tibble: 2,800 x 5\n##   N1    N2    N3    N4    N5   \n##   <fct> <fct> <fct> <fct> <fct>\n## 1 3     4     2     2     3    \n## 2 3     3     3     5     5    \n## 3 4     5     4     2     3    \n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-across-list","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.4.1 【重要知識！】新しい変数名にして追加","text":"ここはこの後色々なところで出てくる方法のため理解しておきたい適用する関数をリストにする（list()に入れる）ことで，変数名を変更して追加できるlist()に入れるときはこれまでと異なる書き方が必要になる\n関数名の前に~（チルダ）が必要\nlist内の関数()内に.xが必要（この場合はxがなくても動く）。ここにacross()の第一引数に指定した変数が入っていくという意味\n関数名の前に~（チルダ）が必要list内の関数()内に.xが必要（この場合はxがなくても動く）。ここにacross()の第一引数に指定した変数が入っていくという意味因子型に変換した変数の末尾に_fがつく","code":"\ndf_bfi %>%\n  mutate(across(c(gender, education),\n                list(f = ~factor(.x)))) %>% \n  select(matches(\"gender|education\"))   ## # A tibble: 2,800 x 4\n##   gender education gender_f education_f\n##    <int>     <int> <fct>    <fct>      \n## 1      1        NA 1        <NA>       \n## 2      2        NA 2        <NA>       \n## 3      2        NA 2        <NA>       \n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-total","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.5 合計点の作成","text":"","code":"\ndf_bfi_n <- \n  df_bfi %>%\n  select(N1:N5) %>%                       \n  mutate(neuroticism = N1 + N2 + N3 + N4 + N5)\n  \ndf_bfi_n## # A tibble: 2,800 x 6\n##      N1    N2    N3    N4    N5 neuroticism\n##   <int> <int> <int> <int> <int>       <int>\n## 1     3     4     2     2     3          14\n## 2     3     3     3     5     5          19\n## 3     4     5     4     2     3          18\n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-total-na","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.5.1 足し上げる変数に欠損があるとどうなるか","text":"","code":"\ndf_bfi_n %>% \n  filter(is.na(neuroticism))     # neuroticism縺君A縺ｪ繧ｱ繝ｼ繧ｹ縺ｫ髯仙ｮ<9a>NA## # A tibble: 106 x 6\n##      N1    N2    N3    N4    N5 neuroticism\n##   <int> <int> <int> <int> <int>       <int>\n## 1     4     5     3     2    NA          NA\n## 2    NA     2     1     2     2          NA\n## 3     1     2     1     2    NA          NA\n## # ... with 103 more rows"},{"path":"mutate.html","id":"mu-seq","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.6 連番からIDの作成","text":"dplyr::row_number()で行番号からIDを作成","code":"\ndf_bfi_n %>% \n  mutate(id = row_number())## # A tibble: 2,800 x 7\n##      N1    N2    N3    N4    N5 neuroticism    id\n##   <int> <int> <int> <int> <int>       <int> <int>\n## 1     3     4     2     2     3          14     1\n## 2     3     3     3     5     5          19     2\n## 3     4     5     4     2     3          18     3\n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-seq-other","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.6.1 【別解】行の名前を直接変数化","text":"実はmutateを使わなくてもできて，データの最初に持ってこれる便利関数があるtibble::rowid_to_column()\nvar =で変数名を指定\nvar =で変数名を指定","code":"\ndf_bfi_n %>% \n  rowid_to_column(var = \"id\")## # A tibble: 2,800 x 7\n##      id    N1    N2    N3    N4    N5 neuroticism\n##   <int> <int> <int> <int> <int> <int>       <int>\n## 1     1     3     4     2     2     3          14\n## 2     2     3     3     3     5     5          19\n## 3     3     4     5     4     2     3          18\n## # ... with 2,797 more rows\n# 縺薙<81>ｮ蜈井ｽｿ繧上↑縺<84>縺ｮ縺ｧ繝<87>繝ｼ繧ｿ繝輔Ξ繝ｼ繝蜑企勁NArm(df_bfi_n)"},{"path":"mutate.html","id":"mu-rev","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.7 逆転項目を作る","text":"","code":""},{"path":"mutate.html","id":"mu-rev-check","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.7.1 逆転項目の確認","text":"bfiデータの場合，どの項目を逆転する必要があるかを示す情報（-変数名で表現）がパッケージに含まれている\npsychTools::bfi.keys で確認可能\npsychTools::bfi.keys で確認可能したがって，“-A1”, “-C4”, “-C5”, “-E1”, “-E2”, “-O2”, “-O5”が対象","code":""},{"path":"mutate.html","id":"mu-rev-recode","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.7.2 逆転（recode）","text":"dplyr::recode()を使用入れ替えたい値をold = newで並べていく\nこの等式の順番が他(mutateなど)と逆になるため，recode()は将来引退する可能性あり\nこの等式の順番が他(mutateなど)と逆になるため，recode()は将来引退する可能性あり","code":"\ndf_bfi %>% \n  mutate(A1_r = recode(A1, `1` = 6L, `2` = 5L, `3` = 4L,      # old縺ｮ謨ｰ蛟､縺ｯ` `縺ｧ蝗ｲ繧蠢<85>隕√′縺ゅｋNA= 3L, `5` = 2L, `6` = 1L)) %>% # new縺ｮ謨ｰ蛟､縺ｫL縺後▽縺上<81>ｮ縺ｯｼ悟梛繧呈紛謨ｰ縺ｮ縺ｾ縺ｾ縺ｫ縺吶ｋ縺溘ａNAselect(A1, A1_r)## # A tibble: 2,800 x 2\n##      A1  A1_r\n##   <int> <int>\n## 1     2     5\n## 2     2     5\n## 3     5     2\n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-recode1","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.7.2.1 変数2つ以上を逆転","text":"A1と同様に同じ形をくり返し変数名だけ変えていけばできるが，コードが長くなりミスも生じやすくなる","code":"\ndf_bfi %>% \n  mutate(A1_r = recode(A1, `1` = 6L, `2` = 5L, `3` = 4L, \n                           `4` = 3L, `5` = 2L, `6` = 1L),\n         C4_r = recode(C4, `1` = 6L, `2` = 5L, `3` = 4L, \n                           `4` = 3L, `5` = 2L, `6` = 1L)) %>% \n  select(A1, A1_r, C4, C4_r)## # A tibble: 2,800 x 4\n##      A1  A1_r    C4  C4_r\n##   <int> <int> <int> <int>\n## 1     2     5     4     3\n## 2     2     5     3     4\n## 3     5     2     2     5\n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-recode2","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.7.2.2 【効率化】 変数2つ以上を逆転","text":"5.4.1 で解説したlistに関数を入れる方法","code":"\ndf_bfi %>% \n  mutate(across(c(A1, C4, C5, E1, E2, O2, O5),\n                list(r = ~recode(.x, `1` = 6, `2` = 5, `3` = 4, \n                                 `4` = 3, `5` = 2, `6` = 1)))) %>% \n  select(A1, A1_r, C4,  C4, C5, C5_r, E1, E1_r, E2, E2_r, O2, O2_r, O5, O5_r)## # A tibble: 2,800 x 13\n##      A1  A1_r    C4    C5  C5_r    E1  E1_r    E2  E2_r    O2\n##   <int> <dbl> <int> <int> <dbl> <int> <dbl> <int> <dbl> <int>\n## 1     2     5     4     4     3     3     4     3     4     6\n## 2     2     5     3     4     3     1     6     1     6     2\n## 3     5     2     2     5     2     2     5     4     3     2\n## # ... with 2,797 more rows, and 3 more variables: O2_r <dbl>,\n## #   O5 <int>, O5_r <dbl>"},{"path":"mutate.html","id":"mu-rev-rule","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.7.3 【別解】逆転（公式）","text":"項目を反転する公式が「(max + min) - 回答値」であることを利用\npsych::reverse.code()のhelp参照\n例：最小値1,最大値4の場合，max + min = 5となり，回答値が2の場合，5 - 2 = 3となり反転された結果となる\npsych::reverse.code()のhelp参照例：最小値1,最大値4の場合，max + min = 5となり，回答値が2の場合，5 - 2 = 3となり反転された結果となる","code":"\nmin <- 1\nmax <- 6\n\ndf_bfi %>% \n  mutate(A1_r = max + min - A1,\n         C4_r = max + min - C4) %>% \n  select(A1, A1_r, C4, C4_r)## # A tibble: 2,800 x 4\n##      A1  A1_r    C4  C4_r\n##   <int> <dbl> <int> <dbl>\n## 1     2     5     4     3\n## 2     2     5     3     4\n## 3     5     2     2     5\n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-rule1","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.7.3.1 【効率化】 変数2つ以上を逆転","text":"~の後に計算式がきても動くここでは，max + min - .x の.xにacross内に置かれた変数が入っていく","code":"\ndf_bfi %>% \n  mutate(across(c(A1,C4),\n                list(r = ~ max + min - .x))) %>% \n  select(A1, A1_r, C4, C4_r)## # A tibble: 2,800 x 4\n##      A1  A1_r    C4  C4_r\n##   <int> <dbl> <int> <dbl>\n## 1     2     5     4     3\n## 2     2     5     3     4\n## 3     5     2     2     5\n## # ... with 2,797 more rows"},{"path":"mutate.html","id":"mu-rev-rule2","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.7.3.2 逆転した変数を含むデータフレーム作成","text":"これ以降で使用するため，項目を逆転した変数を格納しておく","code":"\ndf_bfi <- \n  df_bfi %>% \n  mutate(across(c(A1, C4, C5, E1, E2, O2, O5),\n                list(r = ~ max + min - .x)))"},{"path":"mutate.html","id":"区分変数","chapter":"5 新しい変数（列）の作成：mutate( )","heading":"5.8 2区分変数","text":"","code":"\n  # bfi_a %>% \n  # mutate(gender = fct_recode(gender, male   = \"1\", \n  #                                    female = \"2\"),\n  #        education = fct_recode(education, \"HS\" = \"1\",\n  #                                          \"finished HS\" = \"2\",\n  #                                          \"some college\" = \"3\",\n  #                                          \"college graduate\" = \"4\",\n  #                                          \"graduate degree\" = \"5\"\n  #                               )\n  # )"},{"path":"summarise.html","id":"summarise","chapter":"6 要約値を作る：summarise( )","heading":"6 要約値を作る：summarise( )","text":"パッケージdplyrの関数summarise()結果をデータフレームとして出力するため，扱いが便利データの要約作業はデータを知るうえで頻繁に行うことが想定される\n便利な要約パッケージが色々あるものの，summarise()を使いこなせると役に立つことが多い\n便利な要約パッケージが色々あるものの，summarise()を使いこなせると役に立つことが多い","code":""},{"path":"summarise.html","id":"su-st","chapter":"6 要約値を作る：summarise( )","heading":"6.1 基本","text":"( )の中に出力したい変数名を書き，=の後に関数を入れるNAがある場合，引数na.rm = TRUEがないと結果が出ないので，ほとんどの場合つけて置いた方がよい","code":"df %>% \n  summarise(blm_平均値 = mean(bill_length_mm, na.rm = TRUE))## # A tibble: 1 x 1\n##   blm_平均値\n##        <dbl>\n## 1       43.9"},{"path":"summarise.html","id":"su-st-multiple","chapter":"6 要約値を作る：summarise( )","heading":"6.2 複数の計算","text":"複数の変数について平均値とSDとnを出したいときは，基本知識では全部書くので長くなる","code":"\ndf %>% \n  summarise(blm_mean = mean(bill_length_mm, na.rm = TRUE),\n            bdm_mean = mean(bill_depth_mm, na.rm = TRUE),\n            blm_sd = sd(bill_length_mm, na.rm = TRUE),\n            bdm_sd = sd(bill_depth_mm, na.rm = TRUE),\n            blm_n  = sum(!is.na(bill_length_mm)),\n            bdm_n  = sum(!is.na(bill_depth_mm)))## # A tibble: 1 x 6\n##   blm_mean bdm_mean blm_sd bdm_sd blm_n bdm_n\n##      <dbl>    <dbl>  <dbl>  <dbl> <int> <int>\n## 1     43.9     17.2   5.46   1.97   342   342"},{"path":"summarise.html","id":"su-st-ef","chapter":"6 要約値を作る：summarise( )","heading":"6.2.1 【効率化】","text":"5.3.2で出てきたacross()がここでも有用across()の第一引数に指定したい変数名ベクトル，またはヘルパー関数を入れる実行したい関数をlist内に名前（接尾辞）をつけて列挙し，関数の前に~をつける\n\nacross()ではヘルパー関数が使える！","code":"\ndf %>% \n  summarise(across(c(bill_length_mm, bill_depth_mm),\n                   list(mean = ~mean(.x, na.rm = TRUE),\n                        sd = ~sd(.x, na.rm = TRUE),\n                        n = ~sum(!is.na(.x)))))## # A tibble: 1 x 6\n##   bill_length_mm_mean bill_length_mm_sd bill_length_mm_n\n##                 <dbl>             <dbl>            <int>\n## 1                43.9              5.46              342\n## # ... with 3 more variables: bill_depth_mm_mean <dbl>,\n## #   bill_depth_mm_sd <dbl>, bill_depth_mm_n <int>\ndf %>% \n  summarise(across(starts_with(\"bill\"),\n                   list(mean = ~mean(.x, na.rm = TRUE),\n                        sd = ~sd(.x, na.rm = TRUE),\n                        n = ~sum(!is.na(.x)))))## # A tibble: 1 x 6\n##   bill_length_mm_mean bill_length_mm_sd bill_length_mm_n\n##                 <dbl>             <dbl>            <int>\n## 1                43.9              5.46              342\n## # ... with 3 more variables: bill_depth_mm_mean <dbl>,\n## #   bill_depth_mm_sd <dbl>, bill_depth_mm_n <int>"},{"path":"summarise.html","id":"su-st-reorder","chapter":"6 要約値を作る：summarise( )","heading":"6.2.2 【並び替え】","text":"tidyr::pivot_longer()で，データフレームの行列入れ替えができる引数をnames_patternとnames_toを下記のように指定することで，変数の接尾辞を列名にできる","code":"df %>% \n  summarise(across(bill_length_mm:body_mass_g,\n                   list(mean = ~mean(.x, na.rm = TRUE),\n                        sd = ~sd(.x, na.rm = TRUE),\n                        n = ~sum(!is.na(.x))))) %>% \n  pivot_longer(everything(),\n               names_to = c(\"items\", \".value\"), # \".value\"の部分を列名に\n               names_pattern = \"(.*)_(.*)\") 　  # 正規表現## # A tibble: 4 x 4\n##   items               mean     sd     n\n##   <chr>              <dbl>  <dbl> <int>\n## 1 bill_length_mm      43.9   5.46   342\n## 2 bill_depth_mm       17.2   1.97   342\n## 3 flipper_length_mm  201.   14.1    342\n## 4 body_mass_g       4202.  802.     342"},{"path":"summarise.html","id":"su-group","chapter":"6 要約値を作る：summarise( )","heading":"6.3 層別（グループ別）集計","text":"group_by( )にグループを表す変数を指定するとできるグループを重ねることも可能","code":"\ndf %>% \n  group_by(species) %>% \n  summarise(across(c(bill_length_mm, bill_depth_mm),\n                   list(mean = ~mean(.x, na.rm = TRUE),\n                        sd = ~sd(.x, na.rm = TRUE))))## # A tibble: 3 x 5\n##   species   bill_length_mm_mean bill_length_mm_~ bill_depth_mm_m~\n##   <fct>                   <dbl>            <dbl>            <dbl>\n## 1 Adelie                   38.8             2.66             18.3\n## 2 Chinstrap                48.8             3.34             18.4\n## 3 Gentoo                   47.5             3.08             15.0\n## # ... with 1 more variable: bill_depth_mm_sd <dbl>\ndf %>% \n  group_by(species, sex) %>% \n  summarise(across(c(bill_length_mm, bill_depth_mm),\n                   list(mean = ~mean(.x, na.rm = TRUE),\n                        sd = ~sd(.x, na.rm = TRUE))))## # A tibble: 8 x 6\n## # Groups:   species [3]\n##   species   sex    bill_length_mm_mean bill_length_mm_sd\n##   <fct>     <fct>                <dbl>             <dbl>\n## 1 Adelie    female                37.3              2.03\n## 2 Adelie    male                  40.4              2.28\n## 3 Adelie    <NA>                  37.8              2.80\n## 4 Chinstrap female                46.6              3.11\n## 5 Chinstrap male                  51.1              1.56\n## 6 Gentoo    female                45.6              2.05\n## 7 Gentoo    male                  49.5              2.72\n## 8 Gentoo    <NA>                  45.6              1.37\n## # ... with 2 more variables: bill_depth_mm_mean <dbl>,\n## #   bill_depth_mm_sd <dbl>"},{"path":"summarise.html","id":"su-fun","chapter":"6 要約値を作る：summarise( )","heading":"6.4 【効率化】関数にする","text":"","code":""},{"path":"summarise.html","id":"su-fun-st","chapter":"6 要約値を作る：summarise( )","heading":"6.4.1 基本","text":"関数名 <- function(引数){ 計算式やコード } で関数を定義できる","code":"\nadd_one <- \n  function(x){\n    x + 1\n  }\n\nadd_one(2)## [1] 3"},{"path":"summarise.html","id":"su-fun-meansdn","chapter":"6 要約値を作る：summarise( )","heading":"6.4.2 複数変数の平均値とSDとnを計算する関数","text":"引数にデータフレーム（data）と変数（vars）を入れるここで定義した関数mean_sd_n( )にデータフレームと変数を入れると結果が表示されるvasの部分はacross( )の第一引数に入れるものと同じ指定ができるため，変数ベクトルやヘルパー関数が入る","code":"\nmean_sd_n <- function(data, vars){\ndata %>% \n  summarise(across({{vars}},\n                   list(mean = ~mean(.x, na.rm = TRUE),\n                        sd = ~sd(.x, na.rm = TRUE),\n                        n = ~sum(!is.na(.x)))))\n}\nmean_sd_n(df, bill_length_mm)## # A tibble: 1 x 3\n##   bill_length_mm_mean bill_length_mm_sd bill_length_mm_n\n##                 <dbl>             <dbl>            <int>\n## 1                43.9              5.46              342\n# 螟画焚繝吶け繝医ΝNAmean_sd_n(df, c(flipper_length_mm, body_mass_g))## # A tibble: 1 x 6\n##   flipper_length_mm_mean flipper_length_mm_sd flipper_length_mm_n\n##                    <dbl>                <dbl>               <int>\n## 1                   201.                 14.1                 342\n## # ... with 3 more variables: body_mass_g_mean <dbl>,\n## #   body_mass_g_sd <dbl>, body_mass_g_n <int>\n# 譁<87>蟄励〒繧ょ庄閭ｽNA# mean_sd_n(df, c(\"flipper_length_mm\", \"body_mass_g\"))\n\n# 繝倥Ν繝代<83>ｼ髢｢謨ｰNAmean_sd_n(df, starts_with(\"bill\"))## # A tibble: 1 x 6\n##   bill_length_mm_mean bill_length_mm_sd bill_length_mm_n\n##                 <dbl>             <dbl>            <int>\n## 1                43.9              5.46              342\n## # ... with 3 more variables: bill_depth_mm_mean <dbl>,\n## #   bill_depth_mm_sd <dbl>, bill_depth_mm_n <int>"},{"path":"あとがき.html","id":"あとがき","chapter":"あとがき","heading":"あとがき","text":"あとがき本書の執筆にあたり、同人誌制作の先輩である天川榎@EnokiAmakawa氏から背中押し＆多くの助言をいただきました。この場を借りてお礼申し上げます。","code":""}]
